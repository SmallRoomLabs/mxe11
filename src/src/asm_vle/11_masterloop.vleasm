.ifdef PPC_ASM

			.include "/usr/local/toolchain/powerpc-vle-elf/include_asm/regs_spc56el.asm"

			.section ".text","ax"
		
			.globl masterloop
			.globl ml_stage1_00
			.comm do_wait,2
			.comm user_memory_data,2
		
#-----------------------------------------------------------------------------------------------------
# fetch next word
#-----------------------------------------------------------------------------------------------------
.macro m_fetch_next	
			lhzx		r26,r25,r17
			se_addi		r25,2				# increment PC
#			se_extzh	r25				# limit PC
			e_rlwinm	r4,r26,29,19,22			# r4 is stage1 routine * 512
			e_add16i	r4,r4,ml_stage1_00@l
			se_sub		r4,r24				# negative cycle offset
			se_mtlr		r4
			se_blr
.endm

.macro m_fetch_val data	
			lhzx		\data,r25,r17
			se_addi		r25,2				# increment PC
#			se_extzh	r25
.endm

.macro m_push
			se_subi		r29,4				#SP-4
			add		r4,r17,r29
			se_sth		r28,2(r4)			# save PSW to stack
			se_sth		r25,0(r4)			# save PC to stack
.endm

.macro m_pop
			add		r4,r17,r29
			se_lhz		r28,2(r4)			# save PSW to stack
			se_lhz		r25,0(r4)			# save PC to stack
			se_addi		r29,4				# SP+4
.endm

.macro m_nowait
			e_lis		r6,do_wait@h			# calculate address of do_wait
			e_or2i		r6,do_wait@l
			se_lhz		r5,0(r6)
			se_cmpi		r5,1
			se_bne		m_nowait_\@				#bne m_nowait_1
			e_li		r5,2
			se_sth		r5,0(r6)
m_nowait_\@:
.endm


.macro get_r0 p1
			se_mfar		\p1,r18
.endm
.macro put_r0 p1
			se_mtar		r18,\p1
.endm
.macro put_reg0 p1
			se_mtar		r18,\p1
.endm

.macro get_r1 p1
			se_mfar		\p1,r19
.endm
.macro put_r1 p1
			se_mtar		r19,\p1
.endm
.macro put_reg1 p1
			se_mtar		r19,\p1
.endm

.macro get_r2 p1
			se_mfar		\p1,r20
.endm
.macro put_r2 p1
			se_mtar		r20,\p1
.endm
.macro put_reg2 p1
			se_mtar		r20,\p1
.endm

.macro get_r3 p1
			se_mfar		\p1,r21
.endm
.macro put_r3 p1
			se_mtar		r21,\p1
.endm
.macro put_reg3 p1
			se_mtar		r21,\p1
.endm

.macro get_r4 p1
			se_mfar		\p1,r22
.endm
.macro put_r4 p1
			se_mtar		r22,\p1
.endm
.macro put_reg4 p1
			se_mtar		r22,\p1
.endm

.macro get_r5 p1
			se_mfar		\p1,r23
.endm
.macro put_r5 p1
			se_mtar		r23,\p1
.endm
.macro put_reg5 p1
			se_mtar		r23,\p1
.endm

.macro put_reg6 p1
			se_mr		r29,\p1
.endm
.macro put_reg7 p1
			se_mr		r25,\p1
.endm

.macro get_mem addr,data
			lhzx		\data,\addr,r17
.endm

.macro m_push_reg0
			se_subi		r29,2				#SP-2
			sthx		r18,r29,r17
.endm


.macro m_push_reg1
			se_subi		r29,2				#SP-2
			sthx		r19,r29,r17
.endm


.macro m_push_reg2
			se_subi		r29,2				#SP-2
			sthx		r20,r29,r17
.endm


.macro m_push_reg3
			se_subi		r29,2				#SP-2
			sthx		r21,r29,r17
.endm


.macro m_push_reg4
			se_subi		r29,2				#SP-2
			sthx		r22,r29,r17
.endm


.macro m_push_reg5
			se_subi		r29,2				#SP-2
			sthx		r23,r29,r17
.endm

.macro m_push_reg6
			se_mr		r3,r29
			se_subi		r29,2				#SP-2
			sthx		r3,r29,r17
.endm

.macro m_push_reg7
			se_subi		r29,2				#SP-2
			sthx		r25,r29,r17
.endm


.macro m_pop_reg0
			lhzx		r18,r29,r17
			se_addi		r29,2				# SP+2
.endm


.macro m_pop_reg1
			lhzx		r19,r29,r17
			se_addi		r29,2				# SP+2
.endm

.macro m_pop_reg2
			lhzx		r20,r29,r17
			se_addi		r29,2				# SP+2
.endm

.macro m_pop_reg3
			lhzx		r21,r29,r17
			se_addi		r29,2				# SP+2
.endm

.macro m_pop_reg4
			lhzx		r22,r29,r17
			se_addi		r29,2				# SP+2
.endm

.macro m_pop_reg5
			lhzx		r23,r29,r17
			se_addi		r29,2				# SP+2
.endm

.macro m_pop_sp
			lhzx		r29,r29,r17
			se_addi		r29,2				# SP+2
.endm

.macro m_pop_pc
			lhzx		r25,r29,r17
			se_addi		r29,2				# SP+2
.endm

.macro	load_src_word
			e_bl		get_val_src
.endm 

.macro	load_dst_word
			e_bl		get_val_dst
.endm 

.macro	writeback_word
			e_rlwinm	r3,r26,6,20,25			# r3 is writeback routine * 64	
			e_lis		r4,storeback_word@h
			e_or2i		r4,storeback_word@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr
.endm 

.macro	write_word
			e_rlwinm	r3,r26,7,19,24			# r3 is write routine * 128	
			e_lis		r4,ml_put_wval_00@h
			e_or2i		r4,ml_put_wval_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr
.endm 

.macro stage1_jumpex
stage1_jex_1F_\@:	e_bl		rk11_task
			e_b		stage1_jex_0F_\@		
stage1_jex_1E_\@:	e_bl		rk11_task
			e_b		stage1_jex_0E_\@	
stage1_jex_1D_\@:	e_bl		rk11_task
			e_b		stage1_jex_0D_\@		
stage1_jex_1C_\@:	e_bl		rk11_task
			e_b		stage1_jex_0C_\@		
stage1_jex_1B_\@:	e_bl		rk11_task
			e_b		stage1_jex_0B_\@		
stage1_jex_1A_\@:	e_bl		rk11_task
			e_b		stage1_jex_0A_\@		
stage1_jex_19_\@:	e_bl		rk11_task
			e_b		stage1_jex_09_\@		
stage1_jex_18_\@:	e_bl		rk11_task
			e_b		stage1_jex_08_\@	
stage1_jex_17_\@:	e_bl		rk11_task
			e_b		stage1_jex_07_\@		
stage1_jex_16_\@:	e_bl		rk11_task
			e_b		stage1_jex_06_\@		
stage1_jex_15_\@:	e_bl		rk11_task
			e_b		stage1_jex_05_\@		
stage1_jex_14_\@:	e_bl		rk11_task
			e_b		stage1_jex_04_\@		
stage1_jex_13_\@:	e_bl		rk11_task
			e_b		stage1_jex_03_\@		
stage1_jex_12_\@:	e_bl		rk11_task
			e_b		stage1_jex_02_\@		
stage1_jex_11_\@:	e_bl		rk11_task
			e_b		stage1_jex_01_\@		
stage1_jex_10_\@:	e_bl		rk11_task
			e_b		stage1_jex_00_\@	
stage1_jex_0F_\@:	e_bl		ml_check_i3
			e_b		stage1_jex_00_\@		
stage1_jex_0E_\@:	e_bl		ml_check_i3
			e_b		stage1_jex_00_\@		
stage1_jex_0D_\@:	e_bl		ml_check_i3
			e_b		stage1_jex_00_\@		
stage1_jex_0C_\@:	e_bl		ml_check_i3
			e_b		stage1_jex_00_\@		
stage1_jex_0B_\@:	e_bl		ml_check_i3
			e_b		stage1_jex_00_\@		
stage1_jex_0A_\@:	e_bl		ml_check_i3
			e_b		stage1_jex_00_\@		
stage1_jex_09_\@:	e_bl		ml_check_i3
			e_b		stage1_jex_00_\@		
stage1_jex_08_\@:	e_bl		ml_check_i3
			e_b		stage1_jex_00_\@		
stage1_jex_07_\@:	e_bl		ml_check_i2
			e_b		stage1_jex_00_\@		
stage1_jex_06_\@:	e_bl		ml_check_i2
			e_b		stage1_jex_00_\@		
stage1_jex_05_\@:	e_bl		ml_check_i2
			e_b		stage1_jex_00_\@		
stage1_jex_04_\@:	e_bl		ml_check_i2
			e_b		stage1_jex_00_\@		
stage1_jex_03_\@:	e_bl		ml_check_i1
			e_b		stage1_jex_00_\@		
stage1_jex_02_\@:	e_bl		ml_check_i1
			e_b		stage1_jex_00_\@		
stage1_jex_01_\@:	e_bl		ml_check_i0
			e_b		stage1_jex_00_\@		
stage1_jex_00_\@:
.endm

#-----------------------------------------------------------------------------------------------------
# this is our master loop
#-----------------------------------------------------------------------------------------------------
			.balign 64
masterloop:		e_lis		r3,user_memory_data@h		# calculate address of user memory
			e_or2i		r3,user_memory_data@l
			se_mtar		r17,r3		
			m_fetch_next
			

#-----------------------------------------------------------------------------------------------------
# the stage 1 jump expander
#-----------------------------------------------------------------------------------------------------	
			#-------------------------------------------------------------------
			# stage1_00 -> stage2
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_00:	#	e_bl		stage1_00		
		#	m_fetch_next
			e_rlwinm	r3,r26,0,20,25			# r3 is stage2_00 routine * 64	
			e_add16i	r3,r3,ml_stage2_0000@l
			se_mtctr	r3
			se_bctr
		
			#-------------------------------------------------------------------
			# stage1_01 -> mov
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_01:	#	e_bl		stage1_01		
		#	m_fetch_next
			load_src_word
			e_and2i.	r28,0xFFF1		# clear all flags
			se_btsti	r5,16
			se_beq		ml_mov1
			se_addi		r28,8			# set N	
ml_mov1:		e_and2i.	r5,0xFFFF
			se_bne		ml_mov2
			se_addi		r28,4			# set Z					
ml_mov2:		write_word

			#-------------------------------------------------------------------
			# stage1_02 CMP
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_02:		e_bl		stage1_02		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage1_03 BIT
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_03:		e_bl		stage1_03		
			m_fetch_next
			load_src_word
			se_mr		r7,r5
			load_dst_word
			e_and2i.	r28,0xFFF1		# clear all flags
			se_and		r5,r7
			se_btsti	r5,16
			se_beq		ml_bit6
			se_addi		r28,8			# set N	
ml_bit6:		e_and2i.	r5,0xFFFF
			se_bne		ml_bit7
			se_addi		r28,4			# set Z					
ml_bit7:		m_fetch_next
	
		
			#-------------------------------------------------------------------
			# stage1_04 BIC
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_04:		e_bl		stage1_04		
			m_fetch_next
			load_src_word
			se_mr		r7,r5
			se_not		r7
			load_dst_word
			e_and2i.	r28,0xFFF1		# clear all flags
			se_and		r5,r7
			se_btsti	r5,16
			se_beq		ml_bic6
			se_addi		r28,8			# set N	
ml_bic6:		e_and2i.	r5,0xFFFF
			se_bne		ml_bic7
			se_addi		r28,4			# set Z					
ml_bic7:		writeback_word

			#-------------------------------------------------------------------
			# stage1_05 BIS
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_05:		e_bl		stage1_05		
			m_fetch_next
			load_src_word
			se_mr		r7,r5
			load_dst_word
			e_and2i.	r28,0xFFF1		# clear all flags
			se_or		r5,r7
			se_btsti	r5,16
			se_beq		ml_bis6
			se_addi		r28,8			# set N	
ml_bis6:		e_and2i.	r5,0xFFFF
			se_bne		ml_bis7
			se_addi		r28,4			# set Z					
ml_bis7:		writeback_word

			#-------------------------------------------------------------------
			# stage1_06 ADD
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_06:	#	e_bl		stage1_06		
		#	m_fetch_next
ml_add:			load_src_word
			e_rlwinm	r7,r5,0,16,31		# r7=src
			load_dst_word
			e_rlwinm	r6,r5,0,16,31		# r6=dst
			add		r5,r6,r7
			e_and2i.	r28,0xFFF0		# clear all flags
			se_btsti	r5,15
			se_beq		ml_add1
			se_addi		r28,1			# set C
ml_add1:		se_btsti	r5,16
			se_beq		ml_add2
			se_addi		r28,8			# set N
ml_add2:		xor		r7,r7,r6					
			se_btsti	r7,16
			se_bne		ml_add6
			xor		r6,r6,r5					
			se_btsti	r6,16
			se_beq		ml_add6
			se_addi		r28,2			# set V	
ml_add6:		e_and2i.	r5,0xFFFF
			se_bne		ml_add7
			se_addi		r28,4			# set Z					
ml_add7:		writeback_word

			#-------------------------------------------------------------------
			# stage1_07 -> stage2
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_07:	#	e_bl		stage1_07		
		#	m_fetch_next
			e_rlwinm	r3,r26,0,20,25			# r3 is stage2_00 routine * 64	
			e_add16i	r3,r3,ml_stage2_0700@l
			se_mtctr	r3
			se_bctr
	
			#-------------------------------------------------------------------
			# stage1_10 -> stage2
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_10:	#	e_bl		stage1_10		
		#	m_fetch_next
			e_rlwinm	r3,r26,0,20,25			# r3 is stage2_00 routine * 64	
			e_add16i	r3,r3,ml_stage2_1000@l
			se_mtctr	r3
			se_bctr
	
			#-------------------------------------------------------------------
			# stage1_11 MOVB
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_11:		e_bl		stage1_11		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage1_12 CMPB
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_12:		e_bl		stage1_12		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage1_13 BITB
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_13:		e_bl		stage1_13		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage1_14 BICB
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_14:		e_bl		stage1_14		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage1_15 BISB
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_15:		e_bl		stage1_15		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage1_16 SUB
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_16:	#	e_bl		stage1_16		
		#	m_fetch_next
ml_sub:			load_src_word
			e_rlwinm	r7,r5,0,16,31		# r7=src
			load_dst_word
			e_rlwinm	r6,r5,0,16,31		# r6=dst
			sub		r5,r6,r7		# ress (r5) = dst-src
			e_and2i.	r28,0xFFF0		# clear all flags
			se_btsti	r5,15			# bit 16 is set
			se_beq		ml_sub1
			se_addi		r28,1			# set C
			
ml_sub1:		se_btsti	r5,16
			se_beq		ml_sub2
			se_addi		r28,8			# set N
ml_sub2:		xor		r6,r7,r6					
			se_btsti	r6,16
			se_beq		ml_sub6
			xor		r7,r7,r5					
			se_btsti	r7,16
			se_bne		ml_sub6
			se_addi		r28,2			# set V	
ml_sub6:		e_and2i.	r5,0xFFFF
			se_bne		ml_sub7
			se_addi		r28,4			# set Z					
ml_sub7:		writeback_word

			#-------------------------------------------------------------------
			# stage1_17 -> stage2
			#-------------------------------------------------------------------
			.balign 512
			stage1_jumpex
ml_stage1_17:	#	e_bl		stage1_17		
		#	m_fetch_next
			e_rlwinm	r3,r26,0,20,25			# r3 is stage2_00 routine * 64	
			e_add16i	r3,r3,ml_stage2_1700@l
			se_mtctr	r3
			se_bctr
		
#-----------------------------------------------------------------------------------------------------
# the stage 2_00 jump expander
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# stage2_0000 -> stage3
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0000:	#	e_bl		stage2_0000		
		#	m_fetch_next
			e_rlwinm	r3,r26,7,22,24			# r3 is stage3_0000 routine * 32	
			e_lis		r4,ml_stage3_0000@h
			e_or2i		r4,ml_stage3_0000@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr

			#-------------------------------------------------------------------
			# stage2_0001 jmp
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0001:	#	e_bl		stage2_0001		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25			# r3 is stage3_0000 routine * 64	
			e_lis		r4,ml_do_jmp_00@h
			e_or2i		r4,ml_do_jmp_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr

			#-------------------------------------------------------------------
			# stage2_0002 -> stage3
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0002:	#	e_bl		stage2_0002		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25			# r3 is stage3_0000 routine * 32	
			e_lis		r4,ml_stage3_0200@h
			e_or2i		r4,ml_stage3_0200@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr

			#-------------------------------------------------------------------
			# stage2_0003 -> SWAB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0003:		e_bl		stage2_0003		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0004/05 br (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0004:	#	e_bl		stage2_0004	
		#	m_fetch_next
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			m_fetch_next

			.balign 64
ml_stage2_0005:	#	e_bl		stage2_0004		
		#	m_fetch_next
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0006/07 br (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0006:	#	e_bl		stage2_0006		
		#	m_fetch_next
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3
			e_add2i.	r25,0xFF00	
			m_fetch_next

			.balign 64
ml_stage2_0007:	#	e_bl		stage2_0006		
		#	m_fetch_next
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3
			e_add2i.	r25,0xFF00	
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0010/11 bne (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0010:	#	e_bl		stage2_0010		
		#	m_fetch_next
			se_btsti	r28,29
			se_bne		m_bne_1a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bne_1a:		m_fetch_next

			.balign 64
ml_stage2_0011:	#	e_bl		stage2_0010		
		#	m_fetch_next
			se_btsti	r28,29
			se_bne		m_bne_1b		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bne_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2 0012/13 bne (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0012:	#	e_bl		stage2_0012		
		#	m_fetch_next
			se_btsti	r28,29
			se_bne		m_bne_3a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bne_3a:		m_fetch_next

			.balign 64
ml_stage2_0013:	#	e_bl		stage2_0012		
		#	m_fetch_next
			se_btsti	r28,29
			se_bne		m_bne_3b		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bne_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0014/15 beq (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0014:	#	e_bl		stage2_0014		
		#	m_fetch_next
			se_btsti	r28,29
			se_beq		m_beq_1a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_beq_1a:		m_fetch_next

			.balign 64
ml_stage2_0015:	#	e_bl		stage2_0014		
		#	m_fetch_next
			se_btsti	r28,29
			se_beq		m_beq_1b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_beq_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0016/17 beq (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0016:	#	e_bl		stage2_0016		
		#	m_fetch_next
			se_btsti	r28,29
			se_beq		m_beq_3a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_beq_3a:		m_fetch_next

			.balign 64
ml_stage2_0017:	#	e_bl		stage2_0016		
		#	m_fetch_next
			se_btsti	r28,29
			se_beq		m_beq_3b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_beq_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0020/21 bge (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0020:	#	e_bl		stage2_0020		
		#	m_fetch_next
			e_andi.		r3,r28,10
			se_beq		m_bge_1a
			se_cmpi		r3,10	
			se_bne		m_bge_2a
m_bge_1a:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bge_2a:		m_fetch_next

			.balign 64
ml_stage2_0021:	#	e_bl		stage2_0020		
		#	m_fetch_next
			e_andi.		r3,r28,10
			se_beq		m_bge_1b
			se_cmpi		r3,10	
			se_bne		m_bge_2b
m_bge_1b:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bge_2b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0022/23 bge (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0022:	#	e_bl		stage2_0022		
		#	m_fetch_next
			e_andi.		r3,r28,10
			se_beq		m_bge_5a
			se_cmpi		r3,10	
			se_bne		m_bge_6a
m_bge_5a:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bge_6a:		m_fetch_next

			.balign 64
ml_stage2_0023:	#	e_bl		stage2_0022		
		#	m_fetch_next
			e_andi.		r3,r28,10
			se_beq		m_bge_5b
			se_cmpi		r3,10	
			se_bne		m_bge_6b
m_bge_5b:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bge_6b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0024/25 blt (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0024:	#	e_bl		stage2_0024		
		#	m_fetch_next
			e_andi.		r3,r28,10
			se_beq		m_blt_2a
			se_cmpi		r3,10	
			se_beq		m_blt_2a
m_blt_1a:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_blt_2a:		m_fetch_next

			.balign 64
ml_stage2_0025:	#	e_bl		stage2_0024		
		#	m_fetch_next
			e_andi.		r3,r28,10
			se_beq		m_blt_2b
			se_cmpi		r3,10	
			se_beq		m_blt_2b
m_blt_1b:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_blt_2b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0026/27 blt (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0026:	#	e_bl		stage2_0026		
		#	m_fetch_next
			e_andi.		r3,r28,10
			se_beq		m_blt_6a
			se_cmpi		r3,10	
			se_beq		m_blt_6a
m_blt_5a:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_blt_6a:		m_fetch_next

			.balign 64
ml_stage2_0027:	#	e_bl		stage2_0026		
		#	m_fetch_next
			e_andi.		r3,r28,10
			se_beq		m_blt_6b
			se_cmpi		r3,10	
			se_beq		m_blt_6b
m_blt_5b:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_blt_6b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0030/31 bgt (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0030:	#	e_bl		stage2_0030		
		#	m_fetch_next
			e_andi.		r3,r28,14
			se_beq		m_bgt_1a
			se_cmpi		r3,10	
			se_bne		m_bgt_2a
m_bgt_1a:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bgt_2a:		m_fetch_next

			.balign 64
ml_stage2_0031:	#	e_bl		stage2_0030		
		#	m_fetch_next
			e_andi.		r3,r28,14
			se_beq		m_bgt_1b
			se_cmpi		r3,10	
			se_bne		m_bgt_2b
m_bgt_1b:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bgt_2b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0032/33 bgt (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0032:	#	e_bl		stage2_0032		
		#	m_fetch_next
			e_andi.		r3,r28,14
			se_beq		m_bgt_5a
			se_cmpi		r3,10	
			se_bne		m_bgt_6a
m_bgt_5a:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bgt_6a:		m_fetch_next

			.balign 64
ml_stage2_0033:	#	e_bl		stage2_0032		
		#	m_fetch_next
			e_andi.		r3,r28,14
			se_beq		m_bgt_5b
			se_cmpi		r3,10	
			se_bne		m_bgt_6b
m_bgt_5b:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bgt_6b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0034/35 ble (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0034:	#	e_bl		stage2_0034		
		#	m_fetch_next
			e_andi.		r3,r28,4
			se_bne		m_ble_1a	
			e_andi.		r3,r28,10
			se_beq		m_ble_2a
			se_cmpi		r3,10	
			se_beq		m_ble_2a
m_ble_1a:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_ble_2a:		m_fetch_next

			.balign 64
ml_stage2_0035:	#	e_bl		stage2_0034		
		#	m_fetch_next
			e_andi.		r3,r28,4
			se_bne		m_ble_1b	
			e_andi.		r3,r28,10
			se_beq		m_ble_2b
			se_cmpi		r3,10	
			se_beq		m_ble_2b
m_ble_1b:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_ble_2b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0036/37 ble (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0036:	#	e_bl		stage2_0036		
		#	m_fetch_next
			e_andi.		r3,r28,4
			se_bne		m_ble_5a	
			e_andi.		r3,r28,10
			se_beq		m_ble_6a
			se_cmpi		r3,10	
			se_beq		m_ble_6a
m_ble_5a:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_ble_6a:		m_fetch_next

			.balign 64
ml_stage2_0037:	#	e_bl		stage2_0036		
		#	m_fetch_next
			e_andi.		r3,r28,4
			se_bne		m_ble_5b	
			e_andi.		r3,r28,10
			se_beq		m_ble_6b
			se_cmpi		r3,10	
			se_beq		m_ble_6b
m_ble_5b:		e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_ble_6b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0040 jsr r0,xxxx
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0040:	#	e_bl		stage2_0040		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25	
			e_lis		r4,ml_do_jsr0_00@h
			e_or2i		r4,ml_do_jsr0_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr
		
			#-------------------------------------------------------------------
			# stage2_0041 jsr r1,xxxx
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0041:	#	e_bl		stage2_0041		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25	
			e_lis		r4,ml_do_jsr1_00@h
			e_or2i		r4,ml_do_jsr1_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr
		
			#-------------------------------------------------------------------
			# stage2_0042 jsr r2,xxxx
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0042:	#	e_bl		stage2_0042		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25	
			e_lis		r4,ml_do_jsr2_00@h
			e_or2i		r4,ml_do_jsr2_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr
		
			#-------------------------------------------------------------------
			# stage2_0040 jsr r3,xxxx
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0043:	#	e_bl		stage2_0043		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25	
			e_lis		r4,ml_do_jsr3_00@h
			e_or2i		r4,ml_do_jsr3_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr

			#-------------------------------------------------------------------
			# stage2_0044 jsr r4,xxxx
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0044:	#	e_bl		stage2_0044		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25	
			e_lis		r4,ml_do_jsr4_00@h
			e_or2i		r4,ml_do_jsr4_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr

			#-------------------------------------------------------------------
			# stage2_0045 jsr r5,xxxx
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0045:	#	e_bl		stage2_0045		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25	
			e_lis		r4,ml_do_jsr5_00@h
			e_or2i		r4,ml_do_jsr5_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr

			#-------------------------------------------------------------------
			# stage2_0046 jsr sp,xxxx
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0046:	#	e_bl		stage2_0046		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25	
			e_lis		r4,ml_do_jsr6_00@h
			e_or2i		r4,ml_do_jsr6_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr

			#-------------------------------------------------------------------
			# stage2_0047 jsr pc,xxxx
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0047:	#	e_bl		stage2_0047		
		#	m_fetch_next
			e_rlwinm	r3,r26,6,20,25			# r3 is stage3_0000 routine * 32	
			e_lis		r4,ml_do_jsr7_00@h
			e_or2i		r4,ml_do_jsr7_00@l
			se_add		r3,r4	
			se_mtctr	r3
			se_bctr

			#-------------------------------------------------------------------
			# stage2_0050 clr
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0050:	#	e_bl		stage2_0050		
		#	m_fetch_next
			e_and2i.	r28,0xFFF0
			se_addi		r28,4
			se_li		r5,0
			write_word

			#-------------------------------------------------------------------
			# stage2_0051 com
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0051:	#	e_bl		stage2_0051		
		#	m_fetch_next
			load_dst_word
			e_and2i.	r28,0xFFF0
			se_addi		r28,1			#set C
			se_not		r5
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0051a
			se_addi		r28,4			#set Z
ml_stage2_0051a:	se_btsti	r5,16			
			se_beq		ml_stage2_0051b
			se_addi		r28,8			#set N
ml_stage2_0051b:	writeback_word	
			
			#-------------------------------------------------------------------
			# stage2_0052 inc
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0052:	#	e_bl		stage2_0052		
		#	m_fetch_next
			load_dst_word
			e_and2i.	r28,0xFFF1
			se_addi		r5,1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0052a
			se_addi		r28,4			#set Z
ml_stage2_0052a:	e_cmpl16i	r5,0x8000
			se_bne		ml_stage2_0052b
			se_addi		r28,2			#set V			
ml_stage2_0052b:	se_btsti	r5,16			
			se_beq		ml_stage2_0052c
			se_addi		r28,8			#set N
ml_stage2_0052c:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0053 dec
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0053:	#	e_bl		stage2_0053		
		#	m_fetch_next
			load_dst_word
			e_and2i.	r28,0xFFF1
			se_subi		r5,1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0053a
			se_addi		r28,4			#set Z
ml_stage2_0053a:	e_cmpl16i	r5,0x7FFF
			se_bne		ml_stage2_0053b
			se_addi		r28,2			#set V			
ml_stage2_0053b:	se_btsti	r5,16			
			se_beq		ml_stage2_0053c
			se_addi		r28,8			#set N
ml_stage2_0053c:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0054 neg
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0054:	#	e_bl		stage2_0054		
		#	m_fetch_next
			load_dst_word
			e_and2i.	r28,0xFFF0
			se_neg		r5
			se_addi		r28,1			#set C
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0054a
			se_addi		r28,3			#set Z and clear C
ml_stage2_0054a:	e_cmpl16i	r5,0x8000
			se_bne		ml_stage2_0054b
			se_addi		r28,2			#set V			
ml_stage2_0054b:	se_btsti	r5,16			
			se_beq		ml_stage2_0054c
			se_addi		r28,8			#set N
ml_stage2_0054c:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0055 ADC
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0055:	#	e_bl		stage2_0055		
		#	m_fetch_next
			load_dst_word
			se_mr		r4,r28			# store old carry
			e_and2i.	r28,0xFFF0		# clear all flags
			se_btsti	r4,31			# check old carry
			se_beq		ml_stage2_0055b		# branch if was not set
			se_addi		r5,1			# value++
			e_and2i.	r5,0xFFFF		# check if result is zero
			se_bne		ml_stage2_0055a		
			se_addi		r28,1			# set C if result is 0x0000
ml_stage2_0055a:	e_cmpl16i	r5,0x8000		# check if result is 0x8000
			se_bne		ml_stage2_0055b
			se_addi		r28,2			# set V if result is 0x8000			
		
ml_stage2_0055b:	e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0055c
			se_addi		r28,4			#set Z
ml_stage2_0055c:	se_btsti	r5,16			
			se_beq		ml_stage2_0055d
			se_addi		r28,8			#set N
ml_stage2_0055d:	se_b	ml_stage2_0054c
			
			#-------------------------------------------------------------------
			# stage2_0056 sbc
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0056:	#	e_bl		stage2_0056		
		#	m_fetch_next
			load_dst_word
			se_mr		r4,r28			# save old carry
			e_and2i.	r28,0xFFF0		# clear all flags
			se_extzh	r5			# limit to 16 bits
			e_cmpl16i	r5,0x8000		# check if value is 0x8000
			se_bne		ml_stage2_0056a
			se_addi		r28,2			#set V
						
ml_stage2_0056a:	se_btsti	r4,31			# check old carry
			se_beq		ml_stage2_0056c		# no
			e_cmpl16i	r5,0x0000
			se_bne		ml_stage2_0056b
			se_addi		r28,1			# set C if value is zero
ml_stage2_0056b:	se_subi		r5,1			#value--
		
ml_stage2_0056c:	e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0056d
			se_addi		r28,4			#set Z
ml_stage2_0056d:	se_btsti	r5,16			
			se_beq		ml_stage2_0056e
			se_addi		r28,8			#set N
ml_stage2_0056e:	se_b	ml_stage2_0054c
		
			#-------------------------------------------------------------------
			# stage2_0057 tst
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0057:	#	e_bl		stage2_0057		
		#	m_fetch_next
			load_dst_word
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0057d
			se_addi		r28,4			# set Z
ml_stage2_0057d:	se_btsti	r5,16			
			se_beq		ml_stage2_0057e
			se_addi		r28,8			# set N
ml_stage2_0057e:	m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0060 ror
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0060:	#	e_bl		stage2_0060		
		#	m_fetch_next
			load_dst_word
			se_mr		r4,r28			# save old carry
			e_and2i.	r28,0xFFF0
			se_btsti	r5,31			# check bit 0		
			se_beq		ml_stage2_0060a
			
			se_addi		r28,3			#set C+V
ml_stage2_0060a:	e_rlwinm	r5,r5,31,17,31		#rotate right
			se_btsti	r4,31			#check carry
			se_beq		ml_stage2_0060b		#no
			e_or2i		r5,0x8000
			e_xori		r28,r28,10		#set N, inv V
ml_stage2_0060b:	e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0060c
			se_addi		r28,4			#set Z
ml_stage2_0060c:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0061 rol
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0061: #	e_bl		stage2_0061		
		#	m_fetch_next
			load_dst_word
			se_mr		r4,r28			# save old carry
			e_and2i.	r28,0xFFF0
			se_btsti	r5,16			
			se_beq		ml_stage2_0061a
			se_addi		r28,3			# set C+V
ml_stage2_0061a:	e_rlwinm	r5,r5,1,16,30		#rotate left
			se_btsti	r4,31			#check carry
			se_beq		ml_stage2_0061b		#no
			se_addi		r5,1
ml_stage2_0061b:	se_btsti	r5,16
			se_beq		ml_stage2_0061c
			e_xori		r28,r28,10
ml_stage2_0061c:	e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0061d
			se_addi		r28,4			#set Z
ml_stage2_0061d:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0062 ASR
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0062:	#	e_bl		stage2_0062		
		#	m_fetch_next
			load_dst_word
			e_and2i.	r28,0xFFF0		# clear all flags
			se_btsti	r5,31			# check bit 0
			se_beq		ml_stage2_0062a
			se_addi		r28,3			# set C+V
ml_stage2_0062a:	e_rlwinm	r5,r5,31,17,31		# rotate right
			se_btsti	r5,17			# check bit 14
			se_beq		ml_stage2_0062b		# branch if cleared
			e_or2i		r5,0x8000
			e_xori		r28,r28,10		# set N and invert V
ml_stage2_0062b:	e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0062c
			se_addi		r28,4			#set Z
ml_stage2_0062c:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0063 ASL
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0063:	#	e_bl		stage2_0063		
		#	m_fetch_next
			load_dst_word
			e_and2i.	r28,0xFFF0		# clear all flags
			se_btsti	r5,16			# check bit 15			
			se_beq		ml_stage2_0063a
			se_addi		r28,3			#set C+V
ml_stage2_0063a:	e_rlwinm	r5,r5,1,16,30		# rotate left
			se_btsti	r5,16			# check bit 15
			se_beq		ml_stage2_0063b		# no
			e_xori		r28,r28,10
ml_stage2_0063b:	e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0063c
			se_addi		r28,4			#set Z
ml_stage2_0063c:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0064 MARK
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0064:	#	e_bl		stage2_0064		
		#	m_fetch_next
			e_rlwinm	r4,r26,1,25,30		#offset
			se_add		r29,r4
			se_extzh	r29
			se_mfar		r25,r23			#pc = r5		
			m_pop_reg5	
			m_fetch_next

			.balign 64
ml_stage2_0065:		e_b		stage_undefined		
			.balign 64
ml_stage2_0066:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0067 SXT
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0067:	#	e_bl		stage2_0067		
		#	m_fetch_next
			e_li		r5,0xFFFF
			e_and2i.	r28,0xFFFB		#clear Z
			se_btsti	r28,28			#check N
			se_bne		ml_stage2_0067a		#branch if bit is set		
			se_li		r5,0	
			se_addi		r28,4			#set Z
ml_stage2_0067a:	write_word


			.balign 64
ml_stage2_0070:		e_b		stage_undefined		
			.balign 64
ml_stage2_0071:		e_b		stage_undefined		
			.balign 64
ml_stage2_0072:		e_b		stage_undefined		
			.balign 64
ml_stage2_0073:		e_b		stage_undefined		
			.balign 64
ml_stage2_0074:		e_b		stage_undefined		
			.balign 64
ml_stage2_0075:		e_b		stage_undefined		
			.balign 64
ml_stage2_0076:		e_b		stage_undefined		
			.balign 64
ml_stage2_0077:		e_b		stage_undefined		

#-----------------------------------------------------------------------------------------------------
# the stage 2_10 jump expander
#-----------------------------------------------------------------------------------------------------

			#-------------------------------------------------------------------
			# stage2_1000/01 bpl (positive)
			#-------------------------------------------------------------------		
			.balign 64
ml_stage2_1000:		se_btsti	r28,28
			se_bne		m_bpl_1a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bpl_1a:		m_fetch_next

			.balign 64
ml_stage2_1001:		se_btsti	r28,28
			se_bne		m_bpl_1b
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bpl_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1002/03 bpl (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1002:		se_btsti	r28,28
			se_bne		m_bpl_3a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bpl_3a:		m_fetch_next

			.balign 64
ml_stage2_1003:		se_btsti	r28,28
			se_bne		m_bpl_3b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bpl_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1004/05 bmi (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1004:		se_btsti	r28,28
			se_beq		m_bmi_1a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bmi_1a:		m_fetch_next

			.balign 64
ml_stage2_1005:		se_btsti	r28,28
			se_beq		m_bmi_1b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bmi_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1006/07 bmi (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1006:		se_btsti	r28,28
			se_beq		m_bmi_3a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bmi_3a:		m_fetch_next

			.balign 64
ml_stage2_1007:		se_btsti	r28,28
			se_beq		m_bmi_3b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bmi_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1010/11 bhi (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1010:		e_andi.		r3,r28,5
			se_bne		m_bhi_1a
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bhi_1a:		m_fetch_next

			.balign 64
ml_stage2_1011:		e_andi.		r3,r28,5
			se_bne		m_bhi_1b
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bhi_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1012/13 bhi (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1012:		e_andi.		r3,r28,5
			se_bne		m_bhi_3a
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bhi_3a:		m_fetch_next

			.balign 64
ml_stage2_1013:		e_andi.		r3,r28,5
			se_bne		m_bhi_3b
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bhi_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1014/15 blos (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1014:		e_andi.		r3,r28,5
			se_beq		m_blos_1a
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_blos_1a:		m_fetch_next

			.balign 64
ml_stage2_1015:		e_andi.		r3,r28,5
			se_beq		m_blos_1b
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_blos_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1016/17 blos (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1016:		e_andi.		r3,r28,5
			se_beq		m_blos_3a
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_blos_3a:		m_fetch_next

			.balign 64
ml_stage2_1017:		e_andi.		r3,r28,5
			se_beq		m_blos_3b
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_blos_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1020/21 bvc (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1020:		se_btsti	r28,30
			se_bne		m_bvc_1a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bvc_1a:		m_fetch_next

			.balign 64
ml_stage2_1021:		se_btsti	r28,30
			se_bne		m_bvc_1b
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bvc_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1022/23 bvc (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1022:		se_btsti	r28,30
			se_bne		m_bvc_3a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bvc_3a:		m_fetch_next

			.balign 64
ml_stage2_1023:		se_btsti	r28,30
			se_bne		m_bvc_3b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bvc_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1024/25 bvs (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1024:		se_btsti	r28,30
			se_beq		m_bvs_1a
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bvs_1a:		m_fetch_next

			.balign 64
ml_stage2_1025:		se_btsti	r28,30
			se_beq		m_bvs_1b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bvs_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1026/27 bvs (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1026:		se_btsti	r28,30
			se_beq		m_bvs_3a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bvs_3a:		m_fetch_next

			.balign 64
ml_stage2_1027:		se_btsti	r28,30
			se_beq		m_bvs_3b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bvs_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1030/31 bcc (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1030:		se_btsti	r28,31
			se_bne		m_bcc_1a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bcc_1a:		m_fetch_next

			.balign 64
ml_stage2_1031:		se_btsti	r28,31
			se_bne		m_bcc_1b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bcc_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1032/33 bcc (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1032:		se_btsti	r28,31
			se_bne		m_bcc_3a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bcc_3a:		m_fetch_next

			.balign 64
ml_stage2_1033:		se_btsti	r28,31
			se_bne		m_bcc_3b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bcc_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1034/35 bcs (positive)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1034:		se_btsti	r28,31
			se_beq		m_bcs_1a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bcs_1a:		m_fetch_next

			.balign 64
ml_stage2_1035:		se_btsti	r28,31
			se_beq		m_bcs_1b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
m_bcs_1b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1036/37 bcs (+-)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1036:		se_btsti	r28,31
			se_beq		m_bcs_3a		
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bcs_3a:		m_fetch_next

			.balign 64
ml_stage2_1037:		se_btsti	r28,31
			se_beq		m_bcs_3b	
			e_rlwinm	r3,r26,1,24,30			# r3 is offset	
			se_add		r25,r3		
			e_add2i.	r25,0xFF00	
m_bcs_3b:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1040-43 emt
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1040:		m_push
			e_lhz		r25,24(r17)
			e_lhz		r28,26(r17)
			m_fetch_next

			.balign 64
ml_stage2_1041:		m_push
			e_lhz		r25,24(r17)
			e_lhz		r28,26(r17)
			m_fetch_next

			.balign 64
ml_stage2_1042:		m_push
			e_lhz		r25,24(r17)
			e_lhz		r28,26(r17)
			m_fetch_next

			.balign 64
ml_stage2_1043:		m_push
			e_lhz		r25,24(r17)
			e_lhz		r28,26(r17)
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1044-47 trap
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1044:		m_push
			e_lhz		r25,28(r17)
			e_lhz		r28,30(r17)
			m_fetch_next

			.balign 64
ml_stage2_1045:		m_push
			e_lhz		r25,28(r17)
			e_lhz		r28,30(r17)
			m_fetch_next

			.balign 64
ml_stage2_1046:		m_push
			e_lhz		r25,28(r17)
			e_lhz		r28,30(r17)
			m_fetch_next

			.balign 64
ml_stage2_1047:		m_push
			e_lhz		r25,28(r17)
			e_lhz		r28,30(r17)
			m_fetch_next


			#-------------------------------------------------------------------
			# stage2_1050 CLRB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1050:		e_bl		stage2_1050		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1051 COMB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1051:		e_bl		stage2_1051		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1052 INCB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1052:		e_bl		stage2_1052		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1053 DECB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1053:		e_bl		stage2_1053		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1054 NEGB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1054:		e_bl		stage2_1054		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1055 ADCB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1055:		e_bl		stage2_1055		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1056 SBCB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1056:		e_bl		stage2_1056		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1057 TSTB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1057:		e_bl		stage2_1057		
			m_fetch_next


			#-------------------------------------------------------------------
			# stage2_1060 RORB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1060:		e_bl		stage2_1060		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1061 ROLB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1061:		e_bl		stage2_1061		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1062 ASRB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1062:		e_bl		stage2_1062		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1063 ASLB
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1063:		e_bl		stage2_1063		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1064 MTPS
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1064:	#	e_bl		stage2_1064		
		#	m_fetch_next
			load_dst_word
			se_mr		r28,r5
			m_fetch_next
			

			.balign 64
ml_stage2_1065:		e_bl		stage_undefined		
			m_fetch_next

			.balign 64
ml_stage2_1066:		e_bl		stage_undefined		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_1067 MFPS
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1067:	#	e_bl		stage2_1067		
		#	m_fetch_next
			se_mr		r5,r28
			write_word


			.balign 64
ml_stage2_1070:		e_b		stage_undefined		
			.balign 64
ml_stage2_1071:		e_b		stage_undefined		
			.balign 64
ml_stage2_1072:		e_b		stage_undefined		
			.balign 64
ml_stage2_1073:		e_b		stage_undefined		
			.balign 64
ml_stage2_1074:		e_b		stage_undefined		
			.balign 64
ml_stage2_1075:		e_b		stage_undefined		
			.balign 64
ml_stage2_1076:		e_b		stage_undefined		
			.balign 64
ml_stage2_1077:		e_b		stage_undefined		


#-----------------------------------------------------------------------------------------------------
# division routines
#-----------------------------------------------------------------------------------------------------
			.balign	64
			#R0:R1 / Value
ml_div_r0:		load_dst_word
			e_and2i.	r28,0xFFF0		# clear all flags
			se_extsh	r5			# sign-extend the divisor
			se_cmpi		r5,0
			se_beq		ml_div_r0err
			e_rlwinm	r3,r18,16,0,15		# R0 = HIGH word
			e_rlwimi	r3,r19,0,16,31		# R1 = LOW word
			divw.		r4,r3,r5		# divide R4 = R3 / R5
			e_rlwinm	r18,r4,0,16,31		# get quotient to lower register
			mullw		r6,r4,r5		#
			se_sub		r3,r6
			e_rlwinm	r19,r3,0,16,31		# get remainder to higher register
			e_li		r3,32767
			se_cmp		r4,r3
			se_ble		ml_div_r0a
			e_ori		r28,r28,2
ml_div_r0a:		se_neg		r3
			se_cmp		r4,r3
			se_bge		ml_div_r0b
			e_ori		r28,r28,2
ml_div_r0b:		se_btsti	r4,16
			se_beq		ml_div_r0e
			se_addi		r28,8			#set N
ml_div_r0e:		e_and2i.	r4,0xFFFF
			se_bne		ml_div_r0f
			se_addi		r28,4			#set Z
ml_div_r0f:		m_fetch_next			
ml_div_r0err:		se_addi		r28,7			# set C+V+Z (divide by 0)
			m_fetch_next

			#R2:R3 / Value
ml_div_r2:		load_dst_word
			e_and2i.	r28,0xFFF0		# clear all flags
			se_extsh	r5			# sign-extend the divisor
			se_cmpi		r5,0
			se_beq		ml_div_r2err
			e_rlwinm	r3,r20,16,0,15		# R2 = HIGH word
			e_rlwimi	r3,r21,0,16,31		# R3 = LOW word
			divw.		r4,r3,r5		# divide R4 = R3 / R5
			e_rlwinm	r20,r4,0,16,31		# get quotient to lower register
			mullw		r6,r4,r5		#
			se_sub		r3,r6
			e_rlwinm	r21,r3,0,16,31		# get remainder to higher register
			e_li		r3,32767
			se_cmp		r4,r3
			se_ble		ml_div_r2a
			e_ori		r28,r28,2
ml_div_r2a:		se_neg		r3
			se_cmp		r4,r3
			se_bge		ml_div_r2b
			e_ori		r28,r28,2
ml_div_r2b:		se_btsti	r4,16
			se_beq		ml_div_r2e
			se_addi		r28,8			#set N
ml_div_r2e:		e_and2i.	r4,0xFFFF
			se_bne		ml_div_r2f
			se_addi		r28,4			#set Z
ml_div_r2f:		m_fetch_next			
ml_div_r2err:		se_addi		r28,7			# set C+V+Z (divide by 0)
			m_fetch_next


			#R2:R3 / Value
ml_div_r4:		load_dst_word
			e_and2i.	r28,0xFFF0		# clear all flags
			se_extsh	r5			# sign-extend the divisor
			se_cmpi		r5,0
			se_beq		ml_div_r4err
			e_rlwinm	r3,r22,16,0,15		# R4 = HIGH word
			e_rlwimi	r3,r23,0,16,31		# R5 = LOW word
			divw.		r4,r3,r5		# divide R4 = R3 / R5
			e_rlwinm	r22,r4,0,16,31		# get quotient to lower register
			mullw		r6,r4,r5		#
			se_sub		r3,r6
			e_rlwinm	r23,r3,0,16,31		# get remainder to higher register
			e_li		r3,32767
			se_cmp		r4,r3
			se_ble		ml_div_r4a
			e_ori		r28,r28,2
ml_div_r4a:		se_neg		r3
			se_cmp		r4,r3
			se_bge		ml_div_r4b
			e_ori		r28,r28,2
ml_div_r4b:		se_btsti	r4,16
			se_beq		ml_div_r4e
			se_addi		r28,8			#set N
ml_div_r4e:		e_and2i.	r4,0xFFFF
			se_bne		ml_div_r4f
			se_addi		r28,4			#set Z
ml_div_r4f:		m_fetch_next			
ml_div_r4err:		se_addi		r28,7			# set C+V+Z (divide by 0)
			m_fetch_next

#-----------------------------------------------------------------------------------------------------
# multiplication routines
#-----------------------------------------------------------------------------------------------------
			# R0:R1 = R0 * Value
ml_mul_r0:		load_dst_word
			e_and2i.	r28,0xFFF0		# clear all flags
			se_extsh	r5			# ext sign of dst word
			se_mfar		r4,r18			# get R0
			se_extsh	r4			# ext sign of R0
			mullw.		r3,r4,r5		# r3=r4*r5
			se_bne		ml_mul_r0a
			se_addi		r28,4			#set Z
ml_mul_r0a:		se_btsti	r3,0
			se_beq		ml_mul_r0b
			se_addi		r28,8			#set N
ml_mul_r0b:		e_rlwinm	r19,r3,0,16,31		#LOW result
			e_rlwinm	r18,r3,16,16,31		#HIGH result
			se_btsti	r3,16
			se_bne		ml_mul_r0d
			#positive
			e_cmpl16i	r18,0
			se_beq		ml_mul_r0c
			se_addi		r28,1			#set C
ml_mul_r0c:		m_fetch_next
			#negative
ml_mul_r0d:		e_cmpl16i	r18,0xFFFF
			se_beq		ml_mul_r0e
			se_addi		r28,1			#set C
ml_mul_r0e:		m_fetch_next

			# R0:R1 = R0 * Value
ml_mul_r1:		load_dst_word
			e_and2i.	r28,0xFFF0		#clear all flags
			se_extsh	r5
			se_mfar		r4,r19			#get R1
			se_extsh	r4
			mullw.		r3,r4,r5		#r3=r4*r5
			se_bne		ml_mul_r1a
			se_addi		r28,4			#set Z
ml_mul_r1a:		se_btsti	r3,0
			se_beq		ml_mul_r1b
			se_addi		r28,8			#set N
ml_mul_r1b:		e_rlwinm	r19,r3,0,16,31		#LOW result
			e_rlwinm	r4,r3,16,16,31		#HIGH result
			se_btsti	r3,16
			se_bne		ml_mul_r1d
			#positive
			e_cmpl16i	r4,0
			se_beq		ml_mul_r1c
			se_addi		r28,1			#set C
ml_mul_r1c:		m_fetch_next

ml_mul_r1d:		e_cmpl16i	r4,0xFFFF
			se_beq		ml_mul_r1e
			se_addi		r28,1			#set C
ml_mul_r1e:		m_fetch_next


			# R2:R3 = R2 * Value
ml_mul_r2:		load_dst_word
			e_and2i.	r28,0xFFF0		#clear all flags
			se_extsh	r5
			se_mfar		r4,r20			#get R2
			se_extsh	r4
			mullw.		r3,r4,r5		#r3=r4*r5
			se_bne		ml_mul_r2a
			se_addi		r28,4			#set Z
ml_mul_r2a:		se_btsti	r3,0
			se_beq		ml_mul_r2b
			se_addi		r28,8			#set N
ml_mul_r2b:		e_rlwinm	r21,r3,0,16,31		#LOW result
			e_rlwinm	r20,r3,16,16,31		#HIGH result
			se_btsti	r3,16
			se_bne		ml_mul_r2d
			#positive
			e_cmpl16i	r20,0
			se_beq		ml_mul_r2c
			se_addi		r28,1			#set C
ml_mul_r2c:		m_fetch_next
			#negative
ml_mul_r2d:		e_cmpl16i	r20,0xFFFF
			se_beq		ml_mul_r2e
			se_addi		r28,1			#set C
ml_mul_r2e:		m_fetch_next

			# R3 = R3 * Value
ml_mul_r3:		load_dst_word
			e_and2i.	r28,0xFFF0		#clear all flags
			se_extsh	r5
			se_mfar		r4,r21			#get R1
			se_extsh	r4
			mullw.		r3,r4,r5		#r3=r4*r5
			se_bne		ml_mul_r3a
			se_addi		r28,4			#set Z
ml_mul_r3a:		se_btsti	r3,0
			se_beq		ml_mul_r3b
			se_addi		r28,8			#set N
ml_mul_r3b:		e_rlwinm	r21,r3,0,16,31		#LOW result
			e_rlwinm	r4,r3,16,16,31		#HIGH result
			se_btsti	r3,16
			se_bne		ml_mul_r3d
			#positive
			e_cmpl16i	r4,0
			se_beq		ml_mul_r3c
			se_addi		r28,1			#set C
ml_mul_r3c:		m_fetch_next

ml_mul_r3d:		e_cmpl16i	r4,0xFFFF
			se_beq		ml_mul_r3e
			se_addi		r28,1			#set C
ml_mul_r3e:		m_fetch_next


			# R4:R5 = R4 * Value
ml_mul_r4:		load_dst_word
			e_and2i.	r28,0xFFF0		#clear all flags
			se_extsh	r5
			se_mfar		r4,r22			#get R4
			se_extsh	r4
			mullw.		r3,r4,r5		#r3=r4*r5
			se_bne		ml_mul_r4a
			se_addi		r28,4			#set Z
ml_mul_r4a:		se_btsti	r3,0
			se_beq		ml_mul_r4b
			se_addi		r28,8			#set N
ml_mul_r4b:		e_rlwinm	r23,r3,0,16,31		#LOW result
			e_rlwinm	r22,r3,16,16,31		#HIGH result
			se_btsti	r3,16
			se_bne		ml_mul_r4d
			#positive
			e_cmpl16i	r22,0
			se_beq		ml_mul_r4c
			se_addi		r28,1			#set C
ml_mul_r4c:		m_fetch_next

ml_mul_r4d:		e_cmpl16i	r22,0xFFFF
			se_beq		ml_mul_r4e
			se_addi		r28,1			#set C
ml_mul_r4e:		m_fetch_next

			# R3 = R3 * Value
ml_mul_r5:		load_dst_word
			e_and2i.	r28,0xFFF0		#clear all flags
			se_extsh	r5
			se_mfar		r4,r23			#get R3
			se_extsh	r4
			mullw.		r3,r4,r5		#r3=r4*r5
			se_bne		ml_mul_r5a
			se_addi		r28,4			#set Z
ml_mul_r5a:		se_btsti	r3,0
			se_beq		ml_mul_r5b
			se_addi		r28,8			#set N
ml_mul_r5b:		e_rlwinm	r23,r3,0,16,31		#LOW result
			e_rlwinm	r4,r3,16,16,31		#HIGH result
			se_btsti	r3,16
			se_bne		ml_mul_r5d
			#positive
			e_cmpl16i	r4,0
			se_beq		ml_mul_r5c
			se_addi		r28,1			#set C
ml_mul_r5c:		m_fetch_next

ml_mul_r5d:		e_cmpl16i	r4,0xFFFF
			se_beq		ml_mul_r5e
			se_addi		r28,1			#set C
ml_mul_r5e:		m_fetch_next

#-----------------------------------------------------------------------------------------------------
# ASH routines
#-----------------------------------------------------------------------------------------------------
			#ASH r0
ml_ash_r0:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0x3F			# limit
			e_rlwinm	r3,r18,0,16,31		# get register value
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ash_r0r		# right shift
			#0 = left shift
			se_slw		r3,r5			# shift left
			xor		r4,r18,r3
			se_btsti	r4,16			# test if bit 15 has changed
			se_beq		ml_ash_r0ra
			se_addi		r28,2			# set V
ml_ash_r0ra:		se_btsti	r3,15			# test bit 16 of result
			se_beq		ml_ash_r0_chk
			se_addi		r28,1			# set C
ml_ash_r0_chk:		e_rlwinm	r18,r3,0,16,31		# put back register
			e_and2i.	r18,0xFFFF
			se_bne		ml_ash_r0rc
			se_addi		r28,2			# set Z
ml_ash_r0rc:		se_btsti	r3,16
			se_beq		ml_ash_r0rd
			se_addi		r28,8			# set N
ml_ash_r0rd:		m_fetch_next

			#1 = right shift			
ml_ash_r0r:		se_extsh	r3
			e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ash_r0rs
			se_addi		r28,1			# set C
ml_ash_r0rs:		se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ash_r0_chk


			#ASH r1
ml_ash_r1:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0x3F			# limit
			e_rlwinm	r3,r19,0,16,31		# get register value
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ash_r1r		# right shift
			#0 = left shift
			se_slw		r3,r5			# shift left
			xor		r4,r19,r3
			se_btsti	r4,16			# test if bit 15 has changed
			se_beq		ml_ash_r1ra
			se_addi		r28,2			# set V
ml_ash_r1ra:		se_btsti	r3,15			# test bit 16 of result
			se_beq		ml_ash_r1_chk
			se_addi		r28,1			# set C
ml_ash_r1_chk:		e_rlwinm	r19,r3,0,16,31		# put back register
			e_and2i.	r19,0xFFFF
			se_bne		ml_ash_r1rc
			se_addi		r28,2			# set Z
ml_ash_r1rc:		se_btsti	r3,16
			se_beq		ml_ash_r1rd
			se_addi		r28,8			# set N
ml_ash_r1rd:		m_fetch_next

			#1 = right shift			
ml_ash_r1r:		se_extsh	r3
			e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ash_r1rs
			se_addi		r28,1			# set C
ml_ash_r1rs:		se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ash_r1_chk


			#ASH r2
ml_ash_r2:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0x3F			# limit
			e_rlwinm	r3,r20,0,16,31		# get register value
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ash_r2r		# right shift
			#0 = left shift
			se_slw		r3,r5			# shift left
			xor		r4,r20,r3
			se_btsti	r4,16			# test if bit 15 has changed
			se_beq		ml_ash_r2ra
			se_addi		r28,2			# set V
ml_ash_r2ra:		se_btsti	r3,15			# test bit 16 of result
			se_beq		ml_ash_r2_chk
			se_addi		r28,1			# set C
ml_ash_r2_chk:		e_rlwinm	r20,r3,0,16,31		# put back register
			e_and2i.	r20,0xFFFF
			se_bne		ml_ash_r2rc
			se_addi		r28,2			# set Z
ml_ash_r2rc:		se_btsti	r3,16
			se_beq		ml_ash_r2rd
			se_addi		r28,8			# set N
ml_ash_r2rd:		m_fetch_next

			#1 = right shift			
ml_ash_r2r:		se_extsh	r3
			e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ash_r2rs
			se_addi		r28,1			# set C
ml_ash_r2rs:		se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ash_r2_chk

			#ASH r3
ml_ash_r3:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0x3F			# limit
			e_rlwinm	r3,r21,0,16,31		# get register value
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ash_r3r		# right shift
			#0 = left shift
			se_slw		r3,r5			# shift left
			xor		r4,r21,r3
			se_btsti	r4,16			# test if bit 15 has changed
			se_beq		ml_ash_r3ra
			se_addi		r28,2			# set V
ml_ash_r3ra:		se_btsti	r3,15			# test bit 16 of result
			se_beq		ml_ash_r3_chk
			se_addi		r28,1			# set C
ml_ash_r3_chk:		e_rlwinm	r21,r3,0,16,31		# put back register
			e_and2i.	r21,0xFFFF
			se_bne		ml_ash_r3rc
			se_addi		r28,2			# set Z
ml_ash_r3rc:		se_btsti	r3,16
			se_beq		ml_ash_r3rd
			se_addi		r28,8			# set N
ml_ash_r3rd:		m_fetch_next

			#1 = right shift			
ml_ash_r3r:		se_extsh	r3
			e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ash_r3rs
			se_addi		r28,1			# set C
ml_ash_r3rs:		se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ash_r3_chk


			#ASH r4
ml_ash_r4:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0x3F			# limit
			e_rlwinm	r3,r22,0,16,31		# get register value
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ash_r4r		# right shift
			#0 = left shift
			se_slw		r3,r5			# shift left
			xor		r4,r22,r3
			se_btsti	r4,16			# test if bit 15 has changed
			se_beq		ml_ash_r4ra
			se_addi		r28,2			# set V
ml_ash_r4ra:		se_btsti	r3,15			# test bit 16 of result
			se_beq		ml_ash_r4_chk
			se_addi		r28,1			# set C
ml_ash_r4_chk:		e_rlwinm	r22,r3,0,16,31		# put back register
			e_and2i.	r22,0xFFFF
			se_bne		ml_ash_r4rc
			se_addi		r28,2			# set Z
ml_ash_r4rc:		se_btsti	r3,16
			se_beq		ml_ash_r4rd
			se_addi		r28,8			# set N
ml_ash_r4rd:		m_fetch_next

			#1 = right shift			
ml_ash_r4r:		se_extsh	r3
			e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ash_r4rs
			se_addi		r28,1			# set C
ml_ash_r4rs:		se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ash_r4_chk



			#ASH r5
ml_ash_r5:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0x3F			# limit
			e_rlwinm	r3,r23,0,16,31		# get register value
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ash_r5r		# right shift
			#0 = left shift
			se_slw		r3,r5			# shift left
			xor		r4,r23,r3
			se_btsti	r4,16			# test if bit 15 has changed
			se_beq		ml_ash_r5ra
			se_addi		r28,2			# set V
ml_ash_r5ra:		se_btsti	r3,15			# test bit 16 of result
			se_beq		ml_ash_r5_chk
			se_addi		r28,1			# set C
ml_ash_r5_chk:		e_rlwinm	r23,r3,0,16,31		# put back register
			e_and2i.	r23,0xFFFF
			se_bne		ml_ash_r5rc
			se_addi		r28,2			# set Z
ml_ash_r5rc:		se_btsti	r3,16
			se_beq		ml_ash_r5rd
			se_addi		r28,8			# set N
ml_ash_r5rd:		m_fetch_next

			#1 = right shift			
ml_ash_r5r:		se_extsh	r3
			e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ash_r5rs
			se_addi		r28,1			# set C
ml_ash_r5rs:		se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ash_r5_chk

			#ASH r6 (SP)
ml_ash_r6:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0x3F			# limit
			e_rlwinm	r3,r29,0,16,31		# get register value
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ash_r6r		# right shift
			#0 = left shift
			se_slw		r3,r5			# shift left
			xor		r4,r29,r3
			se_btsti	r4,16			# test if bit 15 has changed
			se_beq		ml_ash_r6ra
			se_addi		r28,2			# set V
ml_ash_r6ra:		se_btsti	r3,15			# test bit 16 of result
			se_beq		ml_ash_r6_chk
			se_addi		r28,1			# set C
ml_ash_r6_chk:		e_rlwinm	r29,r3,0,16,31		# put back register
			e_and2i.	r29,0xFFFF
			se_bne		ml_ash_r6rc
			se_addi		r28,2			# set Z
ml_ash_r6rc:		se_btsti	r3,16
			se_beq		ml_ash_r6rd
			se_addi		r28,8			# set N
ml_ash_r6rd:		m_fetch_next

			#1 = right shift			
ml_ash_r6r:		se_extsh	r3
			e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ash_r6rs
			se_addi		r28,1			# set C
ml_ash_r6rs:		se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ash_r6_chk

			#ASH r7 (PC)
ml_ash_r7:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_and2i.	r5,0x3F			# limit
			e_rlwinm	r3,r25,0,16,31		# get register value
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ash_r7r		# right shift
			#0 = left shift
			se_slw		r3,r5			# shift left
			xor		r4,r25,r3
			se_btsti	r4,16			# test if bit 15 has changed
			se_beq		ml_ash_r7ra
			se_addi		r28,2			# set V
ml_ash_r7ra:		se_btsti	r3,15			# test bit 16 of result
			se_beq		ml_ash_r7_chk
			se_addi		r28,1			# set C
ml_ash_r7_chk:		e_rlwinm	r25,r3,0,16,31		# put back register
			e_and2i.	r25,0xFFFF
			se_bne		ml_ash_r7rc
			se_addi		r28,2			# set Z
ml_ash_r7rc:		se_btsti	r3,16
			se_beq		ml_ash_r7rd
			se_addi		r28,8			# set N
ml_ash_r7rd:		m_fetch_next

			#1 = right shift			
ml_ash_r7r:		se_extsh	r3
			e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ash_r7rs
			se_addi		r28,1			# set C
ml_ash_r7rs:		se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ash_r7_chk
			

#-----------------------------------------------------------------------------------------------------
# ASHC routines
#-----------------------------------------------------------------------------------------------------
			#ashc r0
ml_ashc_r0:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_rlwinm	r3,r18,16,0,15		# R0 = HIGH word
			e_rlwimi	r3,r19,0,16,31		# R1 = LOW word
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ashc_r0_shr		# right shift
			#0 = left shift or not
			se_cmpi		r5,0
			se_beq		ml_ashc_r0_chk		# check result
			#left shift
ml_ashc_r0_shl:		se_subi		r5,1
			se_slw		r3,r5			# shift left n-1
			se_btsti	r3,0			# test bit 32 of result
			se_beq		ml_ashc_r0_shl1
			se_addi		r28,1			# set C
ml_ashc_r0_shl1:	se_slwi		r3,1			# shift left
			xor		r4,r18,r3
			se_btsti	r4,0			# test if bit 31 has changed
			se_beq		ml_ashc_r0_chk
			se_addi		r28,2			# set V

ml_ashc_r0_chk:		e_rlwinm	r18,r3,16,16,31		# put back HI register
			e_rlwinm	r19,r3,0,16,31		# put back LO register
			se_cmp		r3,0
			se_bne		ml_ashc_r0_chk1
			se_addi		r28,2			# set Z
ml_ashc_r0_chk1:	se_btsti	r3,0
			se_beq		ml_ashc_r0_chk2
			se_addi		r28,8			# set N
ml_ashc_r0_chk2:	m_fetch_next
			#right shift				
ml_ashc_r0_shr:		e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ashc_r0_shr1
			se_addi		r28,1			# set C
ml_ashc_r0_shr1:	se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ashc_r0_chk
		
			#ashc r1
ml_ashc_r1:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_rlwinm	r3,r19,16,0,15		# R1 = HIGH word
			e_rlwimi	r3,r19,0,16,31		# R1 = LOW word
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ashc_r1_shr		# right shift
			#0 = left shift or not
			se_cmpi		r5,0
			se_beq		ml_ashc_r1_chk		# check result
			#left shift
ml_ashc_r1_shl:		se_subi		r5,1
			se_slw		r3,r5			# shift left n-1
			se_btsti	r3,0			# test bit 32 of result
			se_beq		ml_ashc_r1_shl1
			se_addi		r28,1			# set C
ml_ashc_r1_shl1:	se_slwi		r3,1			# shift left
			xor		r4,r19,r3
			se_btsti	r4,0			# test if bit 31 has changed
			se_beq		ml_ashc_r1_chk
			se_addi		r28,2			# set V

ml_ashc_r1_chk:		e_rlwinm	r19,r3,16,16,31		# put back HI register
			se_cmp		r3,0
			se_bne		ml_ashc_r1_chk1
			se_addi		r28,2			# set Z
ml_ashc_r1_chk1:	se_btsti	r3,0
			se_beq		ml_ashc_r1_chk2
			se_addi		r28,8			# set N
ml_ashc_r1_chk2:	m_fetch_next
			#right shift				
ml_ashc_r1_shr:		e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ashc_r1_shr1
			se_addi		r28,1			# set C
ml_ashc_r1_shr1:	se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ashc_r1_chk
		

			#ashc r2
ml_ashc_r2:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_rlwinm	r3,r20,16,0,15		# R0 = HIGH word
			e_rlwimi	r3,r21,0,16,31		# R1 = LOW word
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ashc_r2_shr		# right shift
			#0 = left shift or not
			se_cmpi		r5,0
			se_beq		ml_ashc_r2_chk		# check result
			#left shift
ml_ashc_r2_shl:		se_subi		r5,1
			se_slw		r3,r5			# shift left n-1
			se_btsti	r3,0			# test bit 32 of result
			se_beq		ml_ashc_r2_shl1
			se_addi		r28,1			# set C
ml_ashc_r2_shl1:	se_slwi		r3,1			# shift left
			xor		r4,r20,r3
			se_btsti	r4,0			# test if bit 31 has changed
			se_beq		ml_ashc_r2_chk
			se_addi		r28,2			# set V

ml_ashc_r2_chk:		e_rlwinm	r20,r3,16,16,31		# put back HI register
			e_rlwinm	r21,r3,0,16,31		# put back LO register
			se_cmp		r3,0
			se_bne		ml_ashc_r2_chk1
			se_addi		r28,2			# set Z
ml_ashc_r2_chk1:	se_btsti	r3,0
			se_beq		ml_ashc_r2_chk2
			se_addi		r28,8			# set N
ml_ashc_r2_chk2:	m_fetch_next
			#right shift				
ml_ashc_r2_shr:		e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ashc_r2_shr1
			se_addi		r28,1			# set C
ml_ashc_r2_shr1:	se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ashc_r2_chk
		
			#ashc r1
ml_ashc_r3:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_rlwinm	r3,r21,16,0,15		# R1 = HIGH word
			e_rlwimi	r3,r21,0,16,31		# R1 = LOW word
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ashc_r3_shr		# right shift
			#0 = left shift or not
			se_cmpi		r5,0
			se_beq		ml_ashc_r3_chk		# check result
			#left shift
ml_ashc_r3_shl:		se_subi		r5,1
			se_slw		r3,r5			# shift left n-1
			se_btsti	r3,0			# test bit 32 of result
			se_beq		ml_ashc_r3_shl1
			se_addi		r28,1			# set C
ml_ashc_r3_shl1:	se_slwi		r3,1			# shift left
			xor		r4,r21,r3
			se_btsti	r4,0			# test if bit 31 has changed
			se_beq		ml_ashc_r3_chk
			se_addi		r28,2			# set V

ml_ashc_r3_chk:		e_rlwinm	r21,r3,16,16,31		# put back HI register
			se_cmp		r3,0
			se_bne		ml_ashc_r3_chk1
			se_addi		r28,2			# set Z
ml_ashc_r3_chk1:	se_btsti	r3,0
			se_beq		ml_ashc_r3_chk2
			se_addi		r28,8			# set N
ml_ashc_r3_chk2:	m_fetch_next
			#right shift				
ml_ashc_r3_shr:		e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ashc_r3_shr1
			se_addi		r28,1			# set C
ml_ashc_r3_shr1:	se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ashc_r3_chk
		

			#ashc r4
ml_ashc_r4:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_rlwinm	r3,r22,16,0,15		# R0 = HIGH word
			e_rlwimi	r3,r23,0,16,31		# R1 = LOW word
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ashc_r4_shr		# right shift
			#0 = left shift or not
			se_cmpi		r5,0
			se_beq		ml_ashc_r4_chk		# check result
			#left shift
ml_ashc_r4_shl:		se_subi		r5,1
			se_slw		r3,r5			# shift left n-1
			se_btsti	r3,0			# test bit 32 of result
			se_beq		ml_ashc_r4_shl1
			se_addi		r28,1			# set C
ml_ashc_r4_shl1:	se_slwi		r3,1			# shift left
			xor		r4,r22,r3
			se_btsti	r4,0			# test if bit 31 has changed
			se_beq		ml_ashc_r4_chk
			se_addi		r28,2			# set V

ml_ashc_r4_chk:		e_rlwinm	r22,r3,16,16,31		# put back HI register
			e_rlwinm	r23,r3,0,16,31		# put back LO register
			se_cmp		r3,0
			se_bne		ml_ashc_r4_chk1
			se_addi		r28,2			# set Z
ml_ashc_r4_chk1:	se_btsti	r3,0
			se_beq		ml_ashc_r4_chk2
			se_addi		r28,8			# set N
ml_ashc_r4_chk2:	m_fetch_next
			#right shift				
ml_ashc_r4_shr:		e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ashc_r4_shr1
			se_addi		r28,1			# set C
ml_ashc_r4_shr1:	se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ashc_r4_chk
		
			#ashc r5
ml_ashc_r5:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_rlwinm	r3,r23,16,0,15		# R1 = HIGH word
			e_rlwimi	r3,r23,0,16,31		# R1 = LOW word
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ashc_r5_shr		# right shift
			#0 = left shift or not
			se_cmpi		r5,0
			se_beq		ml_ashc_r5_chk		# check result
			#left shift
ml_ashc_r5_shl:		se_subi		r5,1
			se_slw		r3,r5			# shift left n-1
			se_btsti	r3,0			# test bit 32 of result
			se_beq		ml_ashc_r5_shl1
			se_addi		r28,1			# set C
ml_ashc_r5_shl1:	se_slwi		r3,1			# shift left
			xor		r4,r23,r3
			se_btsti	r4,0			# test if bit 31 has changed
			se_beq		ml_ashc_r5_chk
			se_addi		r28,2			# set V

ml_ashc_r5_chk:		e_rlwinm	r23,r3,16,16,31		# put back HI register
			se_cmp		r3,0
			se_bne		ml_ashc_r5_chk1
			se_addi		r28,2			# set Z
ml_ashc_r5_chk1:	se_btsti	r3,0
			se_beq		ml_ashc_r5_chk2
			se_addi		r28,8			# set N
ml_ashc_r5_chk2:	m_fetch_next
			#right shift				
ml_ashc_r5_shr:		e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ashc_r5_shr1
			se_addi		r28,1			# set C
ml_ashc_r5_shr1:	se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ashc_r5_chk
		

			#ashc r6
ml_ashc_r6:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_rlwinm	r3,r29,16,0,15		# R0 = HIGH word
			e_rlwimi	r3,r25,0,16,31		# R1 = LOW word
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ashc_r6_shr		# right shift
			#0 = left shift or not
			se_cmpi		r5,0
			se_beq		ml_ashc_r6_chk		# check result
			#left shift
ml_ashc_r6_shl:		se_subi		r5,1
			se_slw		r3,r5			# shift left n-1
			se_btsti	r3,0			# test bit 32 of result
			se_beq		ml_ashc_r6_shl1
			se_addi		r28,1			# set C
ml_ashc_r6_shl1:	se_slwi		r3,1			# shift left
			xor		r4,r29,r3
			se_btsti	r4,0			# test if bit 31 has changed
			se_beq		ml_ashc_r6_chk
			se_addi		r28,2			# set V

ml_ashc_r6_chk:		e_rlwinm	r29,r3,16,16,31		# put back HI register
			e_rlwinm	r25,r3,0,16,31		# put back LO register
			se_cmp		r3,0
			se_bne		ml_ashc_r6_chk1
			se_addi		r28,2			# set Z
ml_ashc_r6_chk1:	se_btsti	r3,0
			se_beq		ml_ashc_r6_chk2
			se_addi		r28,8			# set N
ml_ashc_r6_chk2:	m_fetch_next
			#right shift				
ml_ashc_r6_shr:		e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ashc_r6_shr1
			se_addi		r28,1			# set C
ml_ashc_r6_shr1:	se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ashc_r6_chk
		
			#ashc r1
ml_ashc_r7:		load_dst_word				# shift value
			e_and2i.	r28,0xFFF0		# clear all flags
			e_rlwinm	r3,r25,16,0,15		# R1 = HIGH word
			e_rlwimi	r3,r25,0,16,31		# R1 = LOW word
			se_btsti	r5,26			# pos/neg
			se_bne		ml_ashc_r7_shr		# right shift
			#0 = left shift or not
			se_cmpi		r5,0
			se_beq		ml_ashc_r7_chk		# check result
			#left shift
ml_ashc_r7_shl:		se_subi		r5,1
			se_slw		r3,r5			# shift left n-1
			se_btsti	r3,0			# test bit 32 of result
			se_beq		ml_ashc_r7_shl1
			se_addi		r28,1			# set C
ml_ashc_r7_shl1:	se_slwi		r3,1			# shift left
			xor		r4,r25,r3
			se_btsti	r4,0			# test if bit 31 has changed
			se_beq		ml_ashc_r7_chk
			se_addi		r28,2			# set V

ml_ashc_r7_chk:		e_rlwinm	r25,r3,16,16,31		# put back HI register
			se_cmp		r3,0
			se_bne		ml_ashc_r7_chk1
			se_addi		r28,2			# set Z
ml_ashc_r7_chk1:	se_btsti	r3,0
			se_beq		ml_ashc_r7_chk2
			se_addi		r28,8			# set N
ml_ashc_r7_chk2:	m_fetch_next
			#right shift				
ml_ashc_r7_shr:		e_li		r4,63
			se_sub		r4,r5
			se_sraw		r3,r4			# shift right n-1 bits
			se_btsti	r3,31			# test bit 31
			se_beq		ml_ashc_r7_shr1
			se_addi		r28,1			# set C
ml_ashc_r7_shr1:	se_srawi	r3,1			# shift right 1 bit
			se_b		ml_ashc_r7_chk
		




#-----------------------------------------------------------------------------------------------------
# the stage 2_07 jump expander
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# stage2_0700 MUL r0
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0700:	#	e_bl		stage2_0700		
		#	m_fetch_next
			e_b		ml_mul_r0	


			#-------------------------------------------------------------------
			# stage2_0701 MUL r1
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0701:	#	e_bl		stage2_0701		
		#	m_fetch_next
			e_b		ml_mul_r1	

			#-------------------------------------------------------------------
			# stage2_0702 MUL r2
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0702:	#	e_bl		stage2_0702		
		#	m_fetch_next
			e_b		ml_mul_r2	

			#-------------------------------------------------------------------
			# stage2_0703 MUL r3
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0703:	#	e_bl		stage2_0703		
		#	m_fetch_next
			e_b		ml_mul_r3	

			#-------------------------------------------------------------------
			# stage2_0704 MUL r4
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0704:	#	e_bl		stage2_0704		
		#	m_fetch_next
			e_b		ml_mul_r4	

			#-------------------------------------------------------------------
			# stage2_0705 MUL r5
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0705:	#	e_bl		stage2_0705		
		#	m_fetch_next
			e_b		ml_mul_r5	

			#-------------------------------------------------------------------
			# stage2_0706
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0706:		e_bl		stage_undefined		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0707
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0707:		e_bl		stage_undefined		
			m_fetch_next


			#-------------------------------------------------------------------
			# stage2_0710 DIV r0
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0710:	#	e_bl		stage2_0710		
		#	m_fetch_next
			e_b		ml_div_r0
			
			#-------------------------------------------------------------------
			# stage2_0711
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0711:		e_bl		stage_undefined		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0712 DIV r2
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0712:	#	e_bl		stage2_0712		
		#	m_fetch_next
			e_b		ml_div_r2

			#-------------------------------------------------------------------
			# stage2_0713
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0713:		e_bl		stage_undefined		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0714 DUV r4
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0714:	#	e_bl		stage2_0714		
		#	m_fetch_next
			e_b		ml_div_r4

			#-------------------------------------------------------------------
			# stage2_0715
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0715:		e_bl		stage_undefined		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0716
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0716:		e_bl		stage_undefined		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0717
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0717:		e_bl		stage_undefined		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0720 ASH r0
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0720:	#	e_bl		stage2_0720		
		#	m_fetch_next
			e_b		ml_ash_r0
			
			#-------------------------------------------------------------------
			# stage2_0721 ASH r1
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0721:	#	e_bl		stage2_0721		
		#	m_fetch_next
			e_b		ml_ash_r1

			#-------------------------------------------------------------------
			# stage2_0722 ASH r2
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0722:	#	e_bl		stage2_0722		
		#	m_fetch_next
			e_b		ml_ash_r2

			#-------------------------------------------------------------------
			# stage2_0723 ASH r3
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0723:	#	e_bl		stage2_0723		
		#	m_fetch_next
			e_b		ml_ash_r3

			#-------------------------------------------------------------------
			# stage2_0724 ASH r4
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0724:	#	e_bl		stage2_0724		
		#	m_fetch_next
			e_b		ml_ash_r4

			#-------------------------------------------------------------------
			# stage2_0725 ASH r5
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0725:	#	e_bl		stage2_0725		
		#	m_fetch_next
			e_b		ml_ash_r5

			#-------------------------------------------------------------------
			# stage2_0726 ASH r6
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0726:	#	e_bl		stage2_0726		
		#	m_fetch_next
			e_b		ml_ash_r6

			#-------------------------------------------------------------------
			# stage2_0727 ASH r7
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0727:	#	e_bl		stage2_0727		
		#	m_fetch_next
			e_b		ml_ash_r7

			#-------------------------------------------------------------------
			# stage2_0730 ASHC r0
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0730:	#	e_bl		stage2_0730		
		#	m_fetch_next
			e_b		ml_ashc_r0

			#-------------------------------------------------------------------
			# stage2_0731 ASHC r1
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0731:	#	e_bl		stage2_0731		
		#	m_fetch_next
			e_b		ml_ashc_r1

			#-------------------------------------------------------------------
			# stage2_0732 ASHC r2
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0732:	#	e_bl		stage2_0732		
		#	m_fetch_next
			e_b		ml_ashc_r2

			#-------------------------------------------------------------------
			# stage2_0733 ASHC r3
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0733:	#	e_bl		stage2_0733		
		#	m_fetch_next
			e_b		ml_ashc_r3

			#-------------------------------------------------------------------
			# stage2_0734 ASHC r4
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0734:	#	e_bl		stage2_0734		
		#	m_fetch_next
			e_b		ml_ashc_r4

			#-------------------------------------------------------------------
			# stage2_0735 ASHC r5
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0735:	#	e_bl		stage2_0735		
		#	m_fetch_next
			e_b		ml_ashc_r5

			#-------------------------------------------------------------------
			# stage2_0736 ASHC r6
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0736:	#	e_bl		stage_undefined		
		#	m_fetch_next
			e_b		ml_ashc_r6

			#-------------------------------------------------------------------
			# stage2_0737 ASHC r7
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0737:	#	e_bl		stage_undefined		
		#	m_fetch_next
			e_b		ml_ashc_r7


			#-------------------------------------------------------------------
			# stage2_0740 XOR R0
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0740:	#	e_bl		stage2_0740		
		#	m_fetch_next
			load_dst_word
			xor		r5,r5,r18			
			e_and2i.	r28,0xFFF1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0740a
			se_addi		r28,4			#set Z
ml_stage2_0740a:	se_btsti	r5,16			
			se_beq		ml_stage2_0740b
			se_addi		r28,8			#set N
ml_stage2_0740b:	writeback_word	
			

			#-------------------------------------------------------------------
			# stage2_0741 XOR R1
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0741:	#	e_bl		stage2_0741		
		#	m_fetch_next
			load_dst_word
			xor		r5,r5,r19			
			e_and2i.	r28,0xFFF1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0741a
			se_addi		r28,4			#set Z
ml_stage2_0741a:	se_btsti	r5,16			
			se_beq		ml_stage2_0741b
			se_addi		r28,8			#set N
ml_stage2_0741b:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0742 XOR R2
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0742:	#	e_bl		stage2_0742		
		#	m_fetch_next
			load_dst_word
			xor		r5,r5,r20			
			e_and2i.	r28,0xFFF1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0742a
			se_addi		r28,4			#set Z
ml_stage2_0742a:	se_btsti	r5,16			
			se_beq		ml_stage2_0742b
			se_addi		r28,8			#set N
ml_stage2_0742b:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0743 XOR R3
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0743:	#	e_bl		stage2_0743		
		#	m_fetch_next
			load_dst_word
			xor		r5,r5,r21			
			e_and2i.	r28,0xFFF1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0743a
			se_addi		r28,4			#set Z
ml_stage2_0743a:	se_btsti	r5,16			
			se_beq		ml_stage2_0743b
			se_addi		r28,8			#set N
ml_stage2_0743b:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0744 XOR r4
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0744:	#	e_bl		stage2_0744		
		#	m_fetch_next
			load_dst_word
			xor		r5,r5,r22			
			e_and2i.	r28,0xFFF1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0744a
			se_addi		r28,4			#set Z
ml_stage2_0744a:	se_btsti	r5,16			
			se_beq		ml_stage2_0744b
			se_addi		r28,8			#set N
ml_stage2_0744b:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0745 XOR r5
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0745:	#	e_bl		stage2_0745		
		#	m_fetch_next
			load_dst_word
			xor		r5,r5,r23			
			e_and2i.	r28,0xFFF1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0745a
			se_addi		r28,4			#set Z
ml_stage2_0745a:	se_btsti	r5,16			
			se_beq		ml_stage2_0745b
			se_addi		r28,8			#set N
ml_stage2_0745b:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0746 XOR sp
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0746:	#	e_bl		stage2_0746		
		#	m_fetch_next
			load_dst_word
			xor		r5,r5,r29			
			e_and2i.	r28,0xFFF1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0746a
			se_addi		r28,4			#set Z
ml_stage2_0746a:	se_btsti	r5,16			
			se_beq		ml_stage2_0746b
			se_addi		r28,8			#set N
ml_stage2_0746b:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0747 XOR pc
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0747:	#	e_bl		stage2_0747		
		#	m_fetch_next
			load_dst_word
			xor		r5,r5,r25			
			e_and2i.	r28,0xFFF1
			e_and2i.	r5,0xFFFF
			se_bne		ml_stage2_0747a
			se_addi		r28,4			#set Z
ml_stage2_0747a:	se_btsti	r5,16			
			se_beq		ml_stage2_0747b
			se_addi		r28,8			#set N
ml_stage2_0747b:	writeback_word	

			#-------------------------------------------------------------------
			# stage2_0750
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0750:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0751
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0751:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0752
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0752:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0753
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0753:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0754
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0754:		e_b		stage_undefined		
			#-------------------------------------------------------------------
			# stage2_0755
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0755:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0756
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0756:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0757
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0757:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0760
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0760:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0761
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0761:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0762
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0762:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0763
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0763:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0764
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0764:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0765
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0765:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0766
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0766:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0767
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0767:		e_b		stage_undefined		

			#-------------------------------------------------------------------
			# stage2_0770 sob r0
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0770:		e_add2i.	r18,0xFFFF		#r0--
			se_beq		ml_sob0a
			e_rlwinm	r4,r26,1,25,30		#offset
			se_sub		r25,r4
ml_sob0a:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0771 sob r1
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0771:		e_add2i.	r19,0xFFFF		#r1--
			se_beq		ml_sob1a
			e_rlwinm	r4,r26,1,25,30		#offset
			se_sub		r25,r4
ml_sob1a:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0772 sob r2
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0772:		e_add2i.	r20,0xFFFF		#r2--
			se_beq		ml_sob2a
			e_rlwinm	r4,r26,1,25,30		#offset
			se_sub		r25,r4
ml_sob2a:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0773 sob r3
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0773:		e_add2i.	r21,0xFFFF		#r3--
			se_beq		ml_sob3a
			e_rlwinm	r4,r26,1,25,30		#offset
			se_sub		r25,r4
ml_sob3a:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0774 sob r4
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0774:		e_add2i.	r22,0xFFFF		#r4--
			se_beq		ml_sob4a
			e_rlwinm	r4,r26,1,25,30		#offset
			se_sub		r25,r4
ml_sob4a:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0775 sob r5
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0775:		e_add2i.	r23,0xFFFF		#r5--
			se_beq		ml_sob5a
			e_rlwinm	r4,r26,1,25,30		#offset
			se_sub		r25,r4
ml_sob5a:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0776 (sob sp)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0776:		e_add2i.	r29,0xFFFF		#r6--
			se_beq		ml_sob6a
			e_rlwinm	r4,r26,1,25,30		#offset
			se_sub		r25,r4
ml_sob6a:		m_fetch_next

			#-------------------------------------------------------------------
			# stage2_0777 (sob pc)
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_0777:		e_b		stage_undefined		

#-----------------------------------------------------------------------------------------------------
# the stage 2_07 jump expander
# FPU is not present
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1700:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1701:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1702:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1703:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1704:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1705:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1706:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1707:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1710:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1711:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1712:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1713:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1714:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1715:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1716:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1717:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1720:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1721:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1722:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1723:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1724:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1725:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1726:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1727:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1730:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1731:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1732:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1733:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1734:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1735:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1736:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1737:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1740:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1741:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1742:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1743:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1744:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1745:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1746:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1747:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1750:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1751:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1752:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1753:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1754:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1755:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1756:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1757:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1760:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1761:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1762:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1763:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1764:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1765:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1766:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1767:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1770:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1771:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1772:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1773:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1774:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1775:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1776:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage2_17
			#-------------------------------------------------------------------
			.balign 64
ml_stage2_1777:		e_b		stage_undefined		

#-----------------------------------------------------------------------------------------------------
# the stage 3_0000 jump expander (ctrl)
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# stage3_0000 halt (ctrl00)
			#-------------------------------------------------------------------
			.balign 128
ml_stage3_0000:		e_bl		rk11_flush
			e_lis		r4,system_state@h			# calculate address of system state
			e_or2i		r4,system_state@l
			e_li		r3,2
			se_sth		r3,0(r4)
			se_subi		r25,2					# pc -=2
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0001 wait (ctrl01)
			#-------------------------------------------------------------------
			.balign 128
ml_stage3_0001:		e_b		ml_wait_0

			#-------------------------------------------------------------------
			# stage3_0002 rti (ctrl02)
			#-------------------------------------------------------------------
			.balign 128
ml_stage3_0002:		m_pop		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0003 bpt (ctrl03) 
			#-------------------------------------------------------------------
			.balign 128
ml_stage3_0003:		m_push
			e_lhz		r25,12(r17)
			e_lhz		r28,14(r17)
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0004 iot (ctrl04)
			#-------------------------------------------------------------------
			.balign 128
ml_stage3_0004:		m_push
			e_lhz		r25,16(r17)
			e_lhz		r28,18(r17)
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0005 reset (ctrl05)
			#-------------------------------------------------------------------
			.balign 128
ml_stage3_0005:		m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0006 rtt (ctrl06)
			#-------------------------------------------------------------------
			.balign 128
ml_stage3_0006:		m_pop		
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0007 undef (ctrl07)
			#-------------------------------------------------------------------
			.balign 128
ml_stage3_0007:		e_bl		stage_undefined		
			m_fetch_next


ml_wait_0:		e_lis		r4,do_wait@h			# calculate address of wait state
			e_or2i		r4,do_wait@l
			se_lhz		r3,0(r4)
			se_cmpi		r3,0
			se_bne		ml_wait_1
			e_li		r3,1
			se_sth		r3,0(r4)
ml_wait_1:		se_lhz		r3,0(r4)
			se_cmpi		r3,1
			se_bne		ml_wait_2
			se_subi		r25,2
ml_wait_2:		se_cmpi		r3,2
			se_bne		ml_wait_3
			e_li		r3,0
			se_sth		r3,0(r4)			
ml_wait_3:		m_fetch_next


#-----------------------------------------------------------------------------------------------------
# the stage 3_0002 jump expander (rts)
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# stage3_0200
			#-------------------------------------------------------------------
			.balign 64
			#rts r0
ml_stage3_0200:		se_mfar		r25,r18			#copy register
			m_pop_reg0
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0201
			#-------------------------------------------------------------------
			.balign 64
			#rts r1
ml_stage3_0201:		se_mfar		r25,r19			#copy register
			m_pop_reg1
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0202
			#-------------------------------------------------------------------
			.balign 64
			#rts r2
ml_stage3_0202:		se_mfar		r25,r20			#copy register
			m_pop_reg2
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0203
			#-------------------------------------------------------------------
			.balign 64
			#rts r3
ml_stage3_0203:		se_mfar		r25,r21			#copy register
			m_pop_reg3
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0204
			#-------------------------------------------------------------------
			.balign 64
			#rts r4			
ml_stage3_0204:		se_mfar		r25,r22			#copy register
			m_pop_reg4
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0205
			#-------------------------------------------------------------------
			.balign 64
			#rts r5
ml_stage3_0205:		se_mfar		r25,r23			#copy register
			m_pop_reg5
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0206
			#-------------------------------------------------------------------
			.balign 64
			#rts sp
ml_stage3_0206:		se_mr		r25,r29			#copy register
			m_pop_sp
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0207
			#-------------------------------------------------------------------
			.balign 64
			#rts pc
ml_stage3_0207:		m_pop_pc
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0210
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0210:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0211
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0211:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0212
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0212:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0213
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0213:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0214
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0214:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0215
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0215:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0216
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0216:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0217
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0217:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0220
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0220:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0221
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0221:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0222
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0222:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0223
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0223:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0224
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0224:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0215
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0225:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0226
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0226:		e_b		stage_undefined

			#-------------------------------------------------------------------
			# stage3_0227
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0227:		e_b		stage_undefined
	

			#-------------------------------------------------------------------
			# stage3_0230
			#-------------------------------------------------------------------
			.balign 64
			#spl 0
ml_stage3_0230:		e_and2i.	r28,0xFF1F		#clear ILEVEL
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0231
			#-------------------------------------------------------------------
			.balign 64
			#spl 1
ml_stage3_0231:		e_and2i.	r28,0xFF1F		#clear ILEVEL
			e_or2i		r28,0x0020
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0232
			#-------------------------------------------------------------------
			.balign 64
			#spl 2
ml_stage3_0232:		e_and2i.	r28,0xFF1F		#clear ILEVEL
			e_or2i		r28,0x0040
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0233
			#-------------------------------------------------------------------
			.balign 64
			#spl 3
ml_stage3_0233:		e_and2i.	r28,0xFF1F		#clear ILEVEL
			e_or2i		r28,0x0060
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0234
			#-------------------------------------------------------------------
			.balign 64
			#spl 4
ml_stage3_0234:		e_and2i.	r28,0xFF1F		#clear ILEVEL
			e_or2i		r28,0x0080
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0235
			#-------------------------------------------------------------------
			.balign 64
			#spl 5
ml_stage3_0235:		e_and2i.	r28,0xFF1F		#clear ILEVEL
			e_or2i		r28,0x00A0
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0236
			#-------------------------------------------------------------------
			.balign 64
			#spl 6
ml_stage3_0236:		e_and2i.	r28,0xFF1F		#clear ILEVEL
			e_or2i		r28,0x00C0
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0237
			#-------------------------------------------------------------------
			.balign 64
			#spl 7
ml_stage3_0237:		e_or2i		r28,0x00E0
			m_fetch_next


			#clearflags
			#-------------------------------------------------------------------
			# stage3_0240
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0240:		e_and2i.	r28,0xFFFF
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0241
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0241:		e_and2i.	r28,0xFFFE
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0242
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0242:		e_and2i.	r28,0xFFFD
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0243
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0243:		e_and2i.	r28,0xFFFC
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0244
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0244:		e_and2i.	r28,0xFFFB
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0245
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0245:		e_and2i.	r28,0xFFFA
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0246
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0246:		e_and2i.	r28,0xFFF9
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0247
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0247:		e_and2i.	r28,0xFFF8
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0250
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0250:		e_and2i.	r28,0xFFF7
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0251
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0251:		e_and2i.	r28,0xFFF6
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0252
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0252:		e_and2i.	r28,0xFFF5
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0253
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0253:		e_and2i.	r28,0xFFF4
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0254
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0254:		e_and2i.	r28,0xFFF3
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0255
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0255:		e_and2i.	r28,0xFFF2
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0256
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0256:		e_and2i.	r28,0xFFF1
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0257
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0257:		e_and2i.	r28,0xFFF0
			m_fetch_next


			#setflags
			#-------------------------------------------------------------------
			# stage3_0260
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0260:		e_or2i		r28,0x00
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0261
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0261:		e_or2i		r28,0x01
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0262
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0262:		e_or2i		r28,0x02
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0263
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0263:		e_or2i		r28,0x03
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0264
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0264:		e_or2i		r28,0x04
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0265
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0265:		e_or2i		r28,0x05
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0266
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0266:		e_or2i		r28,0x06
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0267
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0267:		e_or2i		r28,0x07
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0270
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0270:		e_or2i		r28,0x08
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0271
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0271:		e_or2i		r28,0x09
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0272
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0272:		e_or2i		r28,0x0A
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0273
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0273:		e_or2i		r28,0x0B
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0274
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0274:		e_or2i		r28,0x0C
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0275
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0275:		e_or2i		r28,0x0D
			m_fetch_next

			#-------------------------------------------------------------------
			# stage3_0276
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0276:		e_or2i		r28,0x0E
			m_fetch_next
			
			#-------------------------------------------------------------------
			# stage3_0277
			#-------------------------------------------------------------------
			.balign 64
ml_stage3_0277:		e_or2i		r28,0x0F
			m_fetch_next

#-----------------------------------------------------------------------------------------------------
# jmp xx
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# cannot jump to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jmp_00:		e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jmp_01:		e_li		r25,0xF012
			m_fetch_next	

			.balign 64
ml_do_jmp_02:		e_li		r25,0xF014
			m_fetch_next	

			.balign 64
ml_do_jmp_03:		e_li		r25,0xF016
			m_fetch_next	

			.balign 64
ml_do_jmp_04:		e_li		r25,0xF018
			m_fetch_next	

			.balign 64
ml_do_jmp_05:		e_li		r25,0xF01A
			m_fetch_next	

			.balign 64
ml_do_jmp_06:		e_li		r25,0xF01C
			m_fetch_next	

			.balign 64
ml_do_jmp_07:		e_li		r25,0xF01E
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jmp_10:		e_rlwinm	r25,r18,0,16,31
			m_fetch_next	

			.balign 64
ml_do_jmp_11:		e_rlwinm	r25,r19,0,16,31
			m_fetch_next	

			.balign 64
ml_do_jmp_12:		e_rlwinm	r25,r20,0,16,31
			m_fetch_next	

			.balign 64
ml_do_jmp_13:		e_rlwinm	r25,r21,0,16,31
			m_fetch_next	

			.balign 64
ml_do_jmp_14:		e_rlwinm	r25,r22,0,16,31
			m_fetch_next	

			.balign 64
ml_do_jmp_15:		e_rlwinm	r25,r23,0,16,31
			m_fetch_next	

			.balign 64
ml_do_jmp_16:		e_rlwinm	r25,r29,0,16,31
			m_fetch_next	

			.balign 64
ml_do_jmp_17:		m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jmp_20:		get_r0		r25
			e_add2i.	r18,2
			m_fetch_next	

			.balign 64
ml_do_jmp_21:		get_r1		r25
			e_add2i.	r19,2
			m_fetch_next	

			.balign 64
ml_do_jmp_22:		get_r2		r25
			e_add2i.	r20,2
			m_fetch_next	

			.balign 64
ml_do_jmp_23:		get_r3		r25
			e_add2i.	r21,2
			m_fetch_next	

			.balign 64
ml_do_jmp_24:		get_r4		r25
			e_add2i.	r22,2
			m_fetch_next	

			.balign 64
ml_do_jmp_25:		get_r5		r25
			e_add2i.	r23,2
			m_fetch_next	

			.balign 64
ml_do_jmp_26:		e_rlwinm	r25,r29,0,16,31
			se_addi		r29,2
			m_fetch_next	

			.balign 64
ml_do_jmp_27:		se_addi		r25,2
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jmp_30:		get_r0		r5
			e_add2i.	r18,2
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_31:		get_r1		r5
			e_add2i.	r19,2
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_32:		get_r2		r5
			e_add2i.	r20,2
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_33:		get_r3		r5
			e_add2i.	r21,2
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_34:		get_r4		r5
			e_add2i.	r22,2
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_35:		get_r5		r5
			e_add2i.	r23,2
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_36:		se_mr		r5,r29
			se_addi		r29,2
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_37:		se_mr		r5,r25
			get_mem		r5,r25			#set pc
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jmp_40:		e_add2i.	r18,0xFFFE
			get_r0		r25
			m_fetch_next	

			.balign 64
ml_do_jmp_41:		e_add2i.	r19,0xFFFE
			get_r1		r25
			m_fetch_next	

			.balign 64
ml_do_jmp_42:		e_add2i.	r20,0xFFFE
			get_r2		r25
			m_fetch_next	

			.balign 64
ml_do_jmp_43:		e_add2i.	r21,0xFFFE
			get_r3		r25
			m_fetch_next	

			.balign 64
ml_do_jmp_44:		e_add2i.	r22,0xFFFE
			get_r4		r25
			m_fetch_next	

			.balign 64
ml_do_jmp_45:		e_add2i.	r23,0xFFFE
			get_r5		r25
			m_fetch_next	

			.balign 64
ml_do_jmp_46:		se_subi		r29,2
			e_rlwinm	r25,r29,0,16,31
			m_fetch_next	

			.balign 64
ml_do_jmp_47:		se_subi		r25,2
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jmp_50:		e_add2i.	r18,0xFFFE
			get_r0		r5
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_51:		e_add2i.	r19,0xFFFE
			get_r1		r5
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_52:		e_add2i.	r20,0xFFFE
			get_r2		r5
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_53:		e_add2i.	r21,0xFFFE
			get_r3		r5
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_54:		e_add2i.	r22,0xFFFE
			get_r4		r5
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_55:		e_add2i.	r23,0xFFFE
			get_r5		r5
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_56:		se_subi		r29,2
			se_mr		r5,r29
			get_mem		r5,r25			#set pc
			m_fetch_next	

			.balign 64
ml_do_jmp_57:		se_mr		r5,r25
			get_mem		r5,r25			#set pc
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jmp_60:		m_fetch_val	r5
			add		r25,r5,r18
			se_extzh	r25				# limit PC		
			m_fetch_next	

			.balign 64
ml_do_jmp_61:		m_fetch_val	r5
			add		r25,r5,r19
			se_extzh	r25				# limit PC		
			m_fetch_next	
			
			.balign 64
ml_do_jmp_62:		m_fetch_val	r5
			add		r25,r5,r20
			se_extzh	r25				# limit PC		
			m_fetch_next	

			.balign 64
ml_do_jmp_63:		m_fetch_val	r5
			add		r25,r5,r21
			se_extzh	r25				# limit PC		
			m_fetch_next	

			.balign 64
ml_do_jmp_64:		m_fetch_val	r5
			add		r25,r5,r22
			se_extzh	r25				# limit PC		
			m_fetch_next	

			.balign 64
ml_do_jmp_65:		m_fetch_val	r5
			add		r25,r5,r23
			se_extzh	r25				# limit PC		
			m_fetch_next	

			.balign 64
ml_do_jmp_66:		m_fetch_val	r5
			add		r25,r5,r29
			se_extzh	r25				# limit PC		
			m_fetch_next	

			.balign 64
ml_do_jmp_67:		m_fetch_val	r5
			add		r25,r25,r5
			se_extzh	r25				# limit PC		
			m_fetch_next	
			
			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		
			.balign 64
ml_do_jmp_70:		m_fetch_val	r5
			add		r5,r5,r18
			se_extzh	r5				# limit address		
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jmp_71:		m_fetch_val	r5
			add		r5,r5,r19
			se_extzh	r5				# limit address		
			get_mem		r5,r25
			m_fetch_next	
			
			.balign 64
ml_do_jmp_72:		m_fetch_val	r5
			add		r5,r5,r20
			se_extzh	r5				# limit address		
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jmp_73:		m_fetch_val	r5
			add		r5,r5,r21
			se_extzh	r5				# limit address		
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jmp_74:		m_fetch_val	r5
			add		r5,r5,r22
			se_extzh	r5				# limit address		
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jmp_75:		m_fetch_val	r5
			add		r5,r5,r23
			se_extzh	r5				# limit address		
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jmp_76:		m_fetch_val	r5
			se_add		r5,r29
			se_extzh	r5				# limit address		
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jmp_77:		m_fetch_val	r5
			se_add		r5,r25
			se_extzh	r5				# limit address		
			get_mem		r5,r25
			m_fetch_next	


#-----------------------------------------------------------------------------------------------------
# jsr r7, xx
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# cannot jsr to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr7_00:		m_push_reg7
			put_reg7	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr7_01:		m_push_reg7
			put_reg7	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr7_02:		m_push_reg7
			put_reg7	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr7_03:		m_push_reg7
			put_reg7	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr7_04:		m_push_reg7
			put_reg7	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr7_05:		m_push_reg7
			put_reg7	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr7_06:		m_push_reg7
			put_reg7	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr7_07:		m_push_reg7
			put_reg7	r25
			e_li		r25,0xF010
			m_fetch_next	

			#-------------------------------------------------------------------
			# jsr to (register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr7_10:		e_rlwinm	r5,r18,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_11:		e_rlwinm	r5,r19,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_12:		e_rlwinm	r5,r20,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_13:		e_rlwinm	r5,r21,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_14:		e_rlwinm	r5,r22,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_15:		e_rlwinm	r5,r23,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_16:		e_rlwinm	r5,r29,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_17:		e_rlwinm	r5,r25,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr7_20:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_21:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_22:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_23:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_24:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_25:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_26:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_27:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr7_30:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_31:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_32:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_33:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_34:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_35:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_36:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_37:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr7_40:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_41:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_42:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_43:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_44:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_45:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_46:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_47:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr7_50:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_51:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_52:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_53:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_54:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_55:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_56:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr7_57:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr7_60:		m_fetch_val	r5
			add		r5,r5,r18
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_61:		m_fetch_val	r5
			add		r5,r5,r19
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr7_62:		m_fetch_val	r5
			add		r5,r5,r20
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr7_63:		m_fetch_val	r5
			add		r5,r5,r21
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_64:		m_fetch_val	r5
			add		r5,r5,r22
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_65:		m_fetch_val	r5
			add		r5,r5,r23
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_66:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr7_67:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg7
			put_reg7	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		
			.balign 64
ml_do_jsr7_70:		m_fetch_val	r5
			add		r5,r5,r18
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr7_71:		m_fetch_val	r5
			add		r5,r5,r19
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr7_72:		m_fetch_val	r5
			add		r5,r5,r20
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr7_73:		m_fetch_val	r5
			add		r5,r5,r21
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr7_74:		m_fetch_val	r5
			add		r5,r5,r22
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr7_75:		m_fetch_val	r5
			add		r5,r5,r23
			se_extzh	r5
			m_push_reg7		
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr7_76:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr7_77:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg7
			put_reg7	r25
			get_mem		r5,r25
			m_fetch_next	

#-----------------------------------------------------------------------------------------------------
# jsr r0, xx
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# cannot jsr to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr0_00:		m_push_reg0
			put_reg0	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr0_01:		m_push_reg0
			put_reg0	r25
			e_li		r25,0xF012
			m_fetch_next	

			.balign 64
ml_do_jsr0_02:		m_push_reg0
			put_reg0	r25
			e_li		r25,0xF014
			m_fetch_next	


			.balign 64
ml_do_jsr0_03:		m_push_reg0
			put_reg0	r25
			e_li		r25,0xF016
			m_fetch_next	

			.balign 64
ml_do_jsr0_04:		m_push_reg0
			put_reg0	r25
			e_li		r25,0xF018
			m_fetch_next	

			.balign 64
ml_do_jsr0_05:		m_push_reg0
			put_reg0	r25
			e_li		r25,0xF01A
			m_fetch_next	

			.balign 64
ml_do_jsr0_06:		m_push_reg0
			put_reg0	r25
			e_li		r25,0xF01C
			m_fetch_next	

			.balign 64
ml_do_jsr0_07:		m_push_reg0
			put_reg0	r25
			e_li		r25,0xF01E
			m_fetch_next	

			#-------------------------------------------------------------------
			# jsr to (register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr0_10:		e_rlwinm	r5,r18,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_11:		e_rlwinm	r5,r19,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_12:		e_rlwinm	r5,r20,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_13:		e_rlwinm	r5,r21,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_14:		e_rlwinm	r5,r22,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_15:		e_rlwinm	r5,r23,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_16:		e_rlwinm	r5,r29,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_17:		e_rlwinm	r5,r25,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr0_20:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_21:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_22:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_23:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_24:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_25:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_26:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_27:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr0_30:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_31:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_32:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_33:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_34:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_35:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_36:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_37:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr0_40:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_41:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_42:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_43:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_44:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_45:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_46:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_47:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	


			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr0_50:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_51:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_52:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_53:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_54:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_55:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_56:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			.balign 64
ml_do_jsr0_57:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr0_60:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			.balign 64
ml_do_jsr0_61:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr0_62:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr0_63:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr0_64:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr0_65:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr0_66:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr0_67:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg0
			put_reg0	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		

			.balign 64
ml_do_jsr0_70:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr0_71:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr0_72:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr0_73:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr0_74:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr0_75:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg0		
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr0_76:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr0_77:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg0
			put_reg0	r25
			get_mem		r5,r25
			m_fetch_next	

#-----------------------------------------------------------------------------------------------------
# jsr r1, xx
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# cannot jsr to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr1_00:		m_push_reg1
			put_reg1	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr1_01:		m_push_reg1
			put_reg1	r25
			e_li		r25,0xF012
			m_fetch_next	

			.balign 64
ml_do_jsr1_02:		m_push_reg1
			put_reg1	r25
			e_li		r25,0xF014
			m_fetch_next	

			.balign 64
ml_do_jsr1_03:		m_push_reg1
			put_reg1	r25
			e_li		r25,0xF016
			m_fetch_next	

			.balign 64
ml_do_jsr1_04:		m_push_reg1
			put_reg1	r25
			e_li		r25,0xF018
			m_fetch_next	

			.balign 64
ml_do_jsr1_05:		m_push_reg1
			put_reg1	r25
			e_li		r25,0xF01A
			m_fetch_next	

			.balign 64
ml_do_jsr1_06:		m_push_reg1
			put_reg1	r25
			e_li		r25,0xF01C
			m_fetch_next	

			.balign 64
ml_do_jsr1_07:		m_push_reg1
			put_reg1	r25
			e_li		r25,0xF01E
			m_fetch_next	

			#-------------------------------------------------------------------
			# jsr to (register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr1_10:		e_rlwinm	r5,r18,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_11:		e_rlwinm	r5,r19,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_12:		e_rlwinm	r5,r20,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_13:		e_rlwinm	r5,r21,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_14:		e_rlwinm	r5,r22,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_15:		e_rlwinm	r5,r23,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_16:		e_rlwinm	r5,r29,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_17:		e_rlwinm	r5,r25,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr1_20:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_21:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_22:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_23:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_24:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_25:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_26:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_27:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr1_30:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_31:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_32:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_33:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_34:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_35:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_36:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_37:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr1_40:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_41:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_42:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_43:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_44:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_45:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_46:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_47:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr1_50:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_51:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_52:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_53:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_54:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_55:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_56:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_57:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr1_60:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_61:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr1_62:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr1_63:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_64:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_65:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_66:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr1_67:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg1
			put_reg1	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		

			.balign 64
ml_do_jsr1_70:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_71:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr1_72:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr1_73:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_74:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_75:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg1		
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_76:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr1_77:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg1
			put_reg1	r25
			get_mem		r5,r25
			m_fetch_next	


#-----------------------------------------------------------------------------------------------------
# jsr r2, xx
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# cannot jsr to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr2_00:		m_push_reg2
			put_reg2	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr2_01:		m_push_reg2
			put_reg2	r25
			e_li		r25,0xF012
			m_fetch_next	

			.balign 64
ml_do_jsr2_02:		m_push_reg2
			put_reg2	r25
			e_li		r25,0xF014
			m_fetch_next	

			.balign 64
ml_do_jsr2_03:		m_push_reg2
			put_reg2	r25
			e_li		r25,0xF016
			m_fetch_next	

			.balign 64
ml_do_jsr2_04:		m_push_reg2
			put_reg2	r25
			e_li		r25,0xF018
			m_fetch_next	

			.balign 64
ml_do_jsr2_05:		m_push_reg2
			put_reg2	r25
			e_li		r25,0xF01A
			m_fetch_next	

			.balign 64
ml_do_jsr2_06:		m_push_reg2
			put_reg2	r25
			e_li		r25,0xF01C
			m_fetch_next	

			.balign 64
ml_do_jsr2_07:		m_push_reg2
			put_reg2	r25
			e_li		r25,0xF01E
			m_fetch_next	

			#-------------------------------------------------------------------
			# jsr to (register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr2_10:		e_rlwinm	r5,r18,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_11:		e_rlwinm	r5,r19,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_12:		e_rlwinm	r5,r20,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_13:		e_rlwinm	r5,r21,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_14:		e_rlwinm	r5,r22,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_15:		e_rlwinm	r5,r23,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_16:		e_rlwinm	r5,r29,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_17:		e_rlwinm	r5,r25,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr2_20:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_21:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_22:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_23:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_24:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_25:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_26:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_27:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr2_30:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_31:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_32:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_33:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_34:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_35:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_36:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_37:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr2_40:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_41:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_42:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_43:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_44:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_45:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_46:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_47:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr2_50:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_51:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_52:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_53:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_54:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_55:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_56:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_57:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr2_60:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_61:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr2_62:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr2_63:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_64:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_65:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_66:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr2_67:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg2
			put_reg2	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		

			.balign 64
ml_do_jsr2_70:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_71:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr2_72:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr2_73:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_74:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_75:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg2		
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_76:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr2_77:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg2
			put_reg2	r25
			get_mem		r5,r25
			m_fetch_next	


#-----------------------------------------------------------------------------------------------------
# jsr r3, xx
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# cannot jsr to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr3_00:		m_push_reg3
			put_reg3	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr3_01:		m_push_reg3
			put_reg3	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr3_02:		m_push_reg3
			put_reg3	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr3_03:		m_push_reg3
			put_reg3	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr3_04:		m_push_reg3
			put_reg3	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr3_05:		m_push_reg3
			put_reg3	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr3_06:		m_push_reg3
			put_reg3	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr3_07:		m_push_reg3
			put_reg3	r25
			e_li		r25,0xF010
			m_fetch_next	

			#-------------------------------------------------------------------
			# jsr to (register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr3_10:		e_rlwinm	r5,r18,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_11:		e_rlwinm	r5,r19,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_12:		e_rlwinm	r5,r20,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_13:		e_rlwinm	r5,r21,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_14:		e_rlwinm	r5,r22,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_15:		e_rlwinm	r5,r23,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_16:		e_rlwinm	r5,r29,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_17:		e_rlwinm	r5,r25,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr3_20:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_21:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_22:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_23:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_24:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_25:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_26:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_27:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr3_30:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_31:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_32:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_33:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_34:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_35:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_36:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_37:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr3_40:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_41:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_42:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_43:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_44:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_45:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_46:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_47:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr3_50:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_51:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_52:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_53:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_54:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_55:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_56:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_57:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr3_60:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_61:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr3_62:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr3_63:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_64:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_65:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_66:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr3_67:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg3
			put_reg3	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		

			.balign 64
ml_do_jsr3_70:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_71:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr3_72:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr3_73:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_74:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_75:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg3		
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_76:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr3_77:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg3
			put_reg3	r25
			get_mem		r5,r25
			m_fetch_next	

#-----------------------------------------------------------------------------------------------------
# jsr r4, xx
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# cannot jsr to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr4_00:		m_push_reg4
			put_reg4	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr4_01:		m_push_reg4
			put_reg4	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr4_02:		m_push_reg4
			put_reg4	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr4_03:		m_push_reg4
			put_reg4	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr4_04:		m_push_reg4
			put_reg4	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr4_05:		m_push_reg4
			put_reg4	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr4_06:		m_push_reg4
			put_reg4	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr4_07:		m_push_reg4
			put_reg4	r25
			e_li		r25,0xF010
			m_fetch_next	

			#-------------------------------------------------------------------
			# jsr to (register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr4_10:		e_rlwinm	r5,r18,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_11:		e_rlwinm	r5,r19,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_12:		e_rlwinm	r5,r20,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_13:		e_rlwinm	r5,r21,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_14:		e_rlwinm	r5,r22,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_15:		e_rlwinm	r5,r23,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_16:		e_rlwinm	r5,r29,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_17:		e_rlwinm	r5,r25,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr4_20:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_21:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_22:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_23:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_24:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_25:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_26:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_27:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr4_30:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_31:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_32:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_33:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_34:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_35:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_36:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_37:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr4_40:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_41:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_42:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_43:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_44:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_45:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_46:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_47:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr4_50:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_51:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_52:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_53:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_54:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_55:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_56:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_57:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr4_60:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_61:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr4_62:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr4_63:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_64:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_65:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_66:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr4_67:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg4
			put_reg4	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		

			.balign 64
ml_do_jsr4_70:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_71:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr4_72:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr4_73:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_74:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_75:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg4		
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_76:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr4_77:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg4
			put_reg4	r25
			get_mem		r5,r25
			m_fetch_next	


#-----------------------------------------------------------------------------------------------------
# jsr r3, xx
#-----------------------------------------------------------------------------------------------------
			.align 2
			#-------------------------------------------------------------------
			# cannot jsr to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr5_00:		m_push_reg5
			put_reg5	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr5_01:		m_push_reg5
			put_reg5	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr5_02:		m_push_reg5
			put_reg5	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr5_03:		m_push_reg5
			put_reg5	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr5_04:		m_push_reg5
			put_reg5	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr5_05:		m_push_reg5
			put_reg5	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr5_06:		m_push_reg5
			put_reg5	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr5_07:		m_push_reg5
			put_reg5	r25
			e_li		r25,0xF010
			m_fetch_next	

			#-------------------------------------------------------------------
			# jsr to (register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr5_10:		e_rlwinm	r5,r18,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_11:		e_rlwinm	r5,r19,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_12:		e_rlwinm	r5,r20,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_13:		e_rlwinm	r5,r21,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_14:		e_rlwinm	r5,r22,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_15:		e_rlwinm	r5,r23,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_16:		e_rlwinm	r5,r29,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_17:		e_rlwinm	r5,r25,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr5_20:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_21:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_22:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_23:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_24:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_25:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_26:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_27:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr5_30:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_31:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_32:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_33:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_34:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_35:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_36:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_37:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr5_40:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_41:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_42:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_43:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_44:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_45:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_46:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_47:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr5_50:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_51:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_52:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_53:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_54:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_55:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_56:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_57:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr5_60:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_61:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr5_62:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr5_63:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_64:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_65:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_66:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr5_67:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg5
			put_reg5	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		

			.balign 64
ml_do_jsr5_70:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_71:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr5_72:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr5_73:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_74:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_75:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg5		
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_76:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr5_77:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg5
			put_reg5	r25
			get_mem		r5,r25
			m_fetch_next	


#-----------------------------------------------------------------------------------------------------
# jsr r3, xx
#-----------------------------------------------------------------------------------------------------
			#-------------------------------------------------------------------
			# cannot jsr to register
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr6_00:		m_push_reg6
			put_reg6	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr6_01:		m_push_reg6
			put_reg6	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr6_02:		m_push_reg6
			put_reg6	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr6_03:		m_push_reg6
			put_reg6	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr6_04:		m_push_reg6
			put_reg6	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr6_05:		m_push_reg6
			put_reg6	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr6_06:		m_push_reg6
			put_reg6	r25
			e_li		r25,0xF010
			m_fetch_next	

			.balign 64
ml_do_jsr6_07:		m_push_reg6
			put_reg6	r25
			e_li		r25,0xF010
			m_fetch_next	

			#-------------------------------------------------------------------
			# jsr to (register)
			#-------------------------------------------------------------------
			.balign 64
ml_do_jsr6_10:		e_rlwinm	r5,r18,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_11:		e_rlwinm	r5,r19,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_12:		e_rlwinm	r5,r20,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_13:		e_rlwinm	r5,r21,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_14:		e_rlwinm	r5,r22,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_15:		e_rlwinm	r5,r23,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_16:		e_rlwinm	r5,r29,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_17:		e_rlwinm	r5,r25,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr6_20:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_21:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_22:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_23:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_24:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_25:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_26:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_27:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register++)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr6_30:		e_rlwinm	r5,r18,0,16,31
			e_add2i.	r18,2
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_31:		e_rlwinm	r5,r19,0,16,31
			e_add2i.	r19,2
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_32:		e_rlwinm	r5,r20,0,16,31
			e_add2i.	r20,2
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_33:		e_rlwinm	r5,r21,0,16,31
			e_add2i.	r21,2
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_34:		e_rlwinm	r5,r22,0,16,31
			e_add2i.	r22,2
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_35:		e_rlwinm	r5,r23,0,16,31
			e_add2i.	r23,2
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_36:		e_rlwinm	r5,r29,0,16,31
			se_addi		r29,2
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_37:		e_rlwinm	r5,r25,0,16,31
			se_addi		r25,2
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr6_40:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_41:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_42:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_43:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_44:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_45:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_46:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_47:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			#-------------------------------------------------------------------
			# jump to @(--register)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr6_50:		e_add2i.	r18,0xFFFE
			e_rlwinm	r5,r18,0,16,31
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_51:		e_add2i.	r19,0xFFFE
			e_rlwinm	r5,r19,0,16,31
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_52:		e_add2i.	r20,0xFFFE
			e_rlwinm	r5,r20,0,16,31
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_53:		e_add2i.	r21,0xFFFE
			e_rlwinm	r5,r21,0,16,31
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_54:		e_add2i.	r22,0xFFFE
			e_rlwinm	r5,r22,0,16,31
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_55:		e_add2i.	r23,0xFFFE
			e_rlwinm	r5,r23,0,16,31
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_56:		se_subi		r29,2
			e_rlwinm	r5,r29,0,16,31
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_57:		se_subi		r25,2
			e_rlwinm	r5,r25,0,16,31
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to (register + offset)
			#-------------------------------------------------------------------

			.balign 64
ml_do_jsr6_60:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_61:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr6_62:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	



			.balign 64
ml_do_jsr6_63:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_64:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_65:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_66:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	


			.balign 64
ml_do_jsr6_67:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg6
			put_reg6	r25
			se_mr		r25,r5
			m_fetch_next	

			#-------------------------------------------------------------------
			# jump to @(register + offset)
			#-------------------------------------------------------------------		

			.balign 64
ml_do_jsr6_70:		get_r0		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_71:		get_r1		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr6_72:		get_r2		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	



			.balign 64
ml_do_jsr6_73:		get_r3		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_74:		get_r4		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_75:		get_r5		r5
			m_fetch_val	r4
			se_add		r5,r4
			se_extzh	r5
			m_push_reg6		
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_76:		m_fetch_val	r5
			se_add		r5,r29			
			se_extzh	r5
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


			.balign 64
ml_do_jsr6_77:		m_fetch_val	r5
			se_add		r5,r25			
			se_extzh	r5
			m_push_reg6
			put_reg6	r25
			get_mem		r5,r25
			m_fetch_next	


		
stage_undefined:	m_push
			e_lhz		r25,8(r17)
			e_lhz		r28,10(r17)
			m_fetch_next

#-----------------------------------------------------------------------------------------------------
# the jump table for all cycles which not only fetches new cmd
#-----------------------------------------------------------------------------------------------------
			.balign 64
			
ml_check_i0:		e_cmpl16i	r28,0x80			# check ipl
			se_bge		ml_check_i0a
			se_subi		r25,2				# increment PC
			m_push
			e_lhz		r25,0x34(r17)
			e_lhz		r28,0x36(r17)			
			e_lis		r3,txint_queue@h		# get txint_queue variable
			e_or2i		r3,txint_queue@l
			se_lwz		r5,0(r3)
			se_mr		r4,r5				# copy
			se_andi		r4,0x0f
			se_subi		r28,1				# PSW -=1
			se_add		r28,r4				# PSW += device.minor
			e_rlwinm	r5,r5,24,8,31			# shift right 8 bits
			se_stw		r5,0(r3)			# store back variable
			se_cmpi		r5,0				# check if zero				
			se_bne		ml_check_i0x			# branch if not zero
			e_and2i.	r24,0x00F0			# clear int bit in cycle type
ml_check_i0x:		m_nowait
			lhzx		r26,r25,r17
			se_addi		r25,2				# increment PC
			se_extzh	r25				# limit PC
			e_rlwinm	r4,r26,29,19,22			# r4 is stage1 routine * 512
			e_add16i	r4,r4,ml_stage1_00@l
			se_sub		r4,r24				# negative cycle offset
			se_mtlr		r4
ml_check_i0a:		se_blr

ml_check_i1:		e_cmpl16i	r28,0x80			# check ipl
			se_bge		ml_check_i1a
			se_subi		r25,2				# increment PC
			m_push
			e_lhz		r25,0x30(r17)
			e_lhz		r28,0x32(r17)
			e_lis		r3,rxint_queue@h		# get rxint_queue variable
			e_or2i		r3,rxint_queue@l
			se_lwz		r5,0(r3);
			se_mr		r4,r5				# copy
			se_andi		r4,0x0F				# mask bits
			se_subi		r28,1				# PSW -=1
			se_add		r28,r4				# PSW += device.minor
			e_rlwinm	r5,r5,24,8,31			# shift right 8 bits
			se_stw		r5,0(r3)			# store back variable
			se_cmpi		r5,0				# check if zero				
			se_bne		ml_check_i1x			# branch if not zero
			e_and2i.	r24,0x00E8			# clear int bit in cycle type
ml_check_i1x:		m_nowait
			lhzx		r26,r25,r17
			se_addi		r25,2				# increment PC
			se_extzh	r25				# limit PC
			e_rlwinm	r4,r26,29,19,22			# r4 is stage1 routine * 512
			e_add16i	r4,r4,ml_stage1_00@l
			se_sub		r4,r24				# negative cycle offset
			se_mtlr		r4
ml_check_i1a:		se_blr

ml_check_i2:		e_cmpl16i	r28,0xA0			# check ipl
			se_bge		ml_check_i2a
			se_subi		r25,2				# increment PC
			m_push
			e_lhz		r25,0x90(r17)
			e_lhz		r28,0x92(r17)
			e_and2i.	r24,0x00D8			#clear int bit in cycle type
			m_nowait
			lhzx		r26,r25,r17
			se_addi		r25,2				# increment PC
			se_extzh	r25				# limit PC
			e_rlwinm	r4,r26,29,19,22			# r4 is stage1 routine * 512
			e_add16i	r4,r4,ml_stage1_00@l
			se_sub		r4,r24				# negative cycle offset
			se_mtlr		r4
ml_check_i2a:		se_blr

ml_check_i3:		e_cmpl16i	r28,0xE0			# check ipl
			se_bge		ml_check_i3a
			se_subi		r25,2				# increment PC
			m_push
			e_lhz		r25,0x40(r17)
			e_lhz		r28,0x42(r17)
			e_and2i.	r24,0x00B8			#clear int bit in cycle type
			m_nowait
			lhzx		r26,r25,r17
			se_addi		r25,2				# increment PC
			se_extzh	r25				# limit PC
			e_rlwinm	r4,r26,29,19,22			# r4 is stage1 routine * 512
			e_add16i	r4,r4,ml_stage1_00@l
			se_sub		r4,r24				# negative cycle offset
			se_mtlr		r4
ml_check_i3a:		se_blr

			.balign 256

.endif

